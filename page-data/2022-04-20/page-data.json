{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-04-20/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"bcecadae-13d8-588b-b566-efe60adbc4f4","excerpt":"CRUD 이해 - CRUD 구현하기(참고) 1. 기본 HTML 구조 2. 기본 State 설계 배열이나 객체 데이터의 경우 push method를 활용해 추가할 수 있다. 단순히 재할당을 할 수 없는 것이다.…","html":"<h2>CRUD 이해 - CRUD 구현하기(<a href=\"https://jsbin.com/kupupakoxu/1/edit?html,output\">참고</a>)</h2>\n<h3>1. 기본 HTML 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CRUD<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>WEB<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span>\r\n      <span class=\"token comment\">&lt;!-- 동적 변경 대상\r\n        &lt;li>&lt;a href=\"HTML.html\">HTML&lt;/a>&lt;/li>\r\n        &lt;li>&lt;a href=\"CSS.html\">CSS&lt;/a>&lt;/li>\r\n      --></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token comment\">&lt;!-- 동적 변경 대상\r\n      &lt;h2>Welcome&lt;/h2>\r\n      &lt;p>Hello, WEB&lt;/p>\r\n     --></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>control<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token comment\">&lt;!-- 동적 변경 대상\r\n      &lt;li>&lt;a href=\"/create\">CREATE&lt;/a>&lt;/li>\r\n      &lt;li>&lt;a href=\"/update\">UPDATE&lt;/a>&lt;/li>\r\n      &lt;li>&lt;a href=\"/delete\">DELETE&lt;/a>&lt;/li>\r\n     --></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\r\n    <span class=\"token comment\">// 함수 작성</span>\r\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>2. 기본 State 설계</h3>\n<p>배열이나 객체 데이터의 경우 push method를 활용해 추가할 수 있다. 단순히 재할당을 할 수 없는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 재할당 불가 주제 데이터 설정</span>\r\n<span class=\"token keyword\">let</span> selectedId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 선택되어 있는 id 값 할당할 데이터 추가</span>\r\n\r\n<span class=\"token comment\">// 각 기능 함수 구현</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">nav</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>         <span class=\"token comment\">// Navigation Renderer</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">welcome</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>         <span class=\"token comment\">// delete는 예약어이기 때문에 함수 이름으로 사용 불가능</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">control</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>    <span class=\"token comment\">// UI 동적 Renderer(#control list)</span></code></pre></div>\n<h3>3. 기본 데이터 설정</h3>\n<p><code class=\"language-text\">topics</code> 변수에 재할당 불가능한 <code class=\"language-text\">const</code> 데이터를 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'HTML'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">'HTML is ...'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'CSS'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">'CSS is ...'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">'JavaScript is ...'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한, 선택되어 read 함수에 의해 보여질 데이터의 id 값을 할당할 데이터를 <code class=\"language-text\">let</code> 변수로 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> selectedId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이후 최초 출력을 위해 <code class=\"language-text\">&lt;script></code> 태그 하단에 <code class=\"language-text\">nav</code>와 <code class=\"language-text\">welcome</code> 함수를 호출해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">nav</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>4. Navigation Renderer 구현</h3>\n<p>배열로 선언되어 있는 <code class=\"language-text\">topics</code> 데이터의 각 원소에 대해서 <code class=\"language-text\">Array.prototype.map()</code>을 통해 콜백 함수를 호출하여 Template Literal을 활용해 <code class=\"language-text\">&lt;li></code>, <code class=\"language-text\">&lt;a></code> 태그를 삽입할 수 있다. 다만, 이때 각 원소 별로 생성된 <code class=\"language-text\">&lt;li></code>, <code class=\"language-text\">&lt;a></code> 태그를 <code class=\"language-text\">Array.prototype.join()</code>을 통해 string으로 합쳐야 한다.</p>\n<p>추가적으로 화살표 함수(Arrow Function)를 활용해 간결하게 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Navigation Renderer</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">nav</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> topics<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li>&lt;a href='/read/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.html' id='</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' onclick='navHandler(event);'></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/a>&lt;/li></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nav>ol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이후 생성한 <code class=\"language-text\">&lt;li></code>, <code class=\"language-text\">&lt;a></code> 태그 모음을 <code class=\"language-text\">&lt;nav></code> 태그 내의 <code class=\"language-text\">&lt;ol></code> 태그 바로 아래에 <code class=\"language-text\">innerHTML</code>을 통해 렌더링한다.</p>\n<h3>5. Navigation List click Event Handler 설정</h3>\n<p>4번에서 생성한 Navigation의 <code class=\"language-text\">&lt;a></code> 태그에 대해 해당 항목을 클릭하는 경우에 해당 항목의 <code class=\"language-text\">title</code>과 <code class=\"language-text\">body</code>를 조회하는 기능을 구현하기 위해서 Event Handler를 추가해주어야 한다.</p>\n<h4>Event Handler의 동작 순서</h4>\n<ol>\n<li>클릭하는 경우, 페이지 링크가 작동 하지 않아야 한다.</li>\n<li><code class=\"language-text\">id</code> 값을 가져와야 한다.</li>\n<li><code class=\"language-text\">id</code> 값과 일치하는 <code class=\"language-text\">topics</code>의 원소를 찾아야 한다.</li>\n<li>찾은 원소의 <code class=\"language-text\">title</code>과 <code class=\"language-text\">body</code>를 조회하여 작성하고 렌더링한다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Navigation list click event handler 선언</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">navHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// (1) 링크 작동을 막는다.</span>\r\n  selectedId <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// (2) id 값을 추출한다. ( +e.target.id => from String to Number )</span>\r\n\r\n  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// (3) ~ (4) 작업은 추후 반복될 여지가 있어 독립적인 하나의 `read()` 함수로 설계하고 생성한 후 호출한다.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>6. Read 기능 설정</h3>\n<p><code class=\"language-text\">Array.prototype.filter()</code>를 활용해 5번에서 찾은 <code class=\"language-text\">id</code> 값과 동일한 원소를 찾아 <code class=\"language-text\">&lt;h2></code> 태그에 <code class=\"language-text\">title</code> 데이터를, <code class=\"language-text\">&lt;p></code> 태그에 <code class=\"language-text\">body</code> 데이터를 담아 이를 <code class=\"language-text\">&lt;article></code> 태그에 삽입한다.</p>\n<p>이때 사용하는 배열의 <code class=\"language-text\">Array.prototype.filter()</code> method는 콜백 함수는 일치할 때 <code class=\"language-text\">true</code>, 일치하지 않을 때 <code class=\"language-text\">false</code>를 반환한다. 즉, 콜백 함수의 <code class=\"language-text\">return</code> 값이 <code class=\"language-text\">true</code>인 원소만으로 담은 배열을 반환한다.(원본 배열을 수정하지 않는다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Nav Handler에서 호출될 예정</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// (3) `id` 값과 일치하는 `topics`의 원소를 찾아야 한다.</span>\r\n  <span class=\"token comment\">// topics.filter(el => { if (el.id === selectedId) { return true; } else { return false; } });의 축약</span>\r\n  <span class=\"token keyword\">const</span> topic <span class=\"token operator\">=</span> topics<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> selectedId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">// 다른 방법: const topic = topics.filter(el => el.id === selectedId)[0];</span>\r\n  \r\n  <span class=\"token comment\">// (4) - 1 찾은 원소의 `title`과 `body`를 조회화기</span>\r\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h2></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h2>&lt;p></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>body<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p></span><span class=\"token template-punctuation string\">`</span></span>\r\n  <span class=\"token comment\">// 다른 방법: const content = `&lt;h2>${topic.title}&lt;/h2>&lt;p>${topic.body}&lt;/p>`</span>\r\n  \r\n  <span class=\"token comment\">// (4) - 2 렌더링 하기</span>\r\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>7. CRUD 기능 관련 UI 생성</h3>\n<p>CRUD 기능 관련 UI의 경우 개발 정책에 따라 노출 여부가 달라진다. 여기서는, 최초 출력시 <code class=\"language-text\">Create</code> 버튼만이 출력되나, 이후 데이터를 조회하는 경우, 즉 다음과 같은 경우에 <code class=\"language-text\">Update</code>, <code class=\"language-text\">Delete</code> 버튼을 노출하는 것으로 설정한다.</p>\n<blockquote>\n<p><code class=\"language-text\">selectedId</code>가 존재하는 경우에만 <code class=\"language-text\">Update</code>, <code class=\"language-text\">Delete</code> 노출.</p>\n</blockquote>\n<p>우선, <code class=\"language-text\">contextUI</code>는 <code class=\"language-text\">selectedId</code>가 존재하는 경우에만 노출될 것이기에 없는 경우 빈 문자열로 설정한다. 이후, <code class=\"language-text\">Create</code> 버튼과 함께 <code class=\"language-text\">&lt;ul></code> 태그 내부에 렌더링한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">control</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> contextUI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>selectedId <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\r\n    contextUI <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n      &lt;li>&lt;a href=''>Update&lt;/a>&lt;/li>\r\n      &lt;li>&lt;a href=''>Delete&lt;/a>&lt;/li>\r\n    </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\r\n  \r\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#control'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n    &lt;li>&lt;a href='' onclick='event.preventDefault(); create();'>Create&lt;/a>&lt;/li>\r\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>contextUI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\r\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이때, 데이터 삽입 기능 즉, <code class=\"language-text\">Create</code> 기능을 위한 UI를 로드하기 위해 해당 버튼에 click Event Handler를 삽입하고, <code class=\"language-text\">&lt;a></code> 태그의 기본 동작을 막은 후, UI를 구현하는 <code class=\"language-text\">create()</code> 함수를 호출한다.</p>\n<h3>8. Create UI 구현 함수 설정</h3>\n<p>7번에서 구현한 <code class=\"language-text\">Create</code> 버튼 클릭 시 <code class=\"language-text\">&lt;form></code> 태그로 구성된 입력 창 UI를 열어주고, <code class=\"language-text\">submit</code>하는 경우에 해당 Event를 받은 Event Handler를 연결해주어야 한다. 이때 각각을 <code class=\"language-text\">&lt;p></code> 태그로 감싸 <code class=\"language-text\">&lt;input></code>과 <code class=\"language-text\">&lt;textarea></code>을 수직으로 구현해야 하는 점에 유의해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> createUI <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n    &lt;form onsubmit='createHandler(event);'>\r\n      &lt;p>&lt;input type='text' name='title' placeholder='title' />&lt;/p>\r\n      &lt;p>&lt;textarea name='body' placeholder='content'>&lt;/textarea>&lt;/p>\r\n      &lt;p>&lt;input type='submit' value='create' />&lt;/p>\r\n    &lt;/form>\r\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> createUI<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>9. Create Submit Event Handler 기능 구현</h3>\n<p>Create 버튼에 대해 submit 이벤트 발생 시 우선 <code class=\"language-text\">topics</code>에 새로운 원소 <code class=\"language-text\">topic</code>이 추가된다. 이후 Navigation List을 다시 렌더링하여 추가된 <code class=\"language-text\">topic</code>을 보여준다. 그 다음 데이터가 추가될 것을 위해서 <code class=\"language-text\">id</code> 값을 <code class=\"language-text\">1</code> 늘려주고, 마지막으로 추가된 데이터에 대한 상세 조회 데이터를 열어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> newTopic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> nextId<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> t<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  topics<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newTopic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// navigation list 새로고침</span>\r\n  <span class=\"token function\">nav</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// 다음 추가를 위해 +1</span>\r\n  selectedId <span class=\"token operator\">=</span> nextId<span class=\"token punctuation\">;</span>\r\n  nextId<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// 상세 조회로 이동 및 UI 창 제거 &lt; parameter로 selectedId 추가하는 것이 훨 나음</span>\r\n  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>10. 미 구현 기능</h3>\n<ul>\n<li><code class=\"language-text\">delete</code></li>\n<li><code class=\"language-text\">update</code></li>\n<li>추가적인 CSS</li>\n</ul>\n<h3>11. 추가 기능 구현 - <code class=\"language-text\">welcome()</code> 함수 설정 및 초기 호출 함수 설정</h3>\n<p>메인 화면의 상단에 위치한 <code class=\"language-text\">WEB</code>을 클릭하는 경우, 인삿말 렌더링하는 함수를 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h2>Welcome&lt;/h2>&lt;p>Hello, Web&lt;/p></span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한, 초기 호출 함수를 구분해 <code class=\"language-text\">&lt;script></code> 태그 최하단에 호출해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 최초 출력을 위한 함수 호출</span>\r\n<span class=\"token function\">nav</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">control</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr />\n<h3>참고 - <a href=\"https://p5js.org/ko/\">p5js</a></h3>\n<p>cdn을 활용해 <code class=\"language-text\">&lt;script></code> 태그로 설치할 수 있다.\r\n<a href=\"https://docs.google.com/spreadsheets/d/178cIAH4C-UlYHQ24oWLW9DK7Bg91GLTOKnPYd1cXqFQ/edit#gid=1061497286\">기타 참고 자료</a>\r\n이후 동적 배경화면, 동적 마우스 등으로 구현할 수 있을 듯 하다.</p>\n<hr />","frontmatter":{"title":"[Elice SW 2기] mini-log #013 : JavaScript와 CRUD의 이해","date":"April 20, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, 이고잉, HTML, CSS, JavaScript, OOP, Event, CRUD"}},"previous":{"fields":{"slug":"/2022-04-18/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #011 : Modern JavaScript의 이해"}},"next":{"fields":{"slug":"/2022-04-21/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #014 : JavaScript 심화 - Call Stack과 Execution Context, Closure"}}},"pageContext":{"id":"bcecadae-13d8-588b-b566-efe60adbc4f4","previousPostId":"3c5e1e9a-5d48-543b-a557-c55d9e6adde9","nextPostId":"9409b27b-985c-562d-980c-e735e959036e"}},
    "staticQueryHashes": ["2841359383","3257411868"]}