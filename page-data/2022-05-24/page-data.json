{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-05-24/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"7d4c9768-f5b7-58e4-9724-c5ef1f7edea3","excerpt":"데일리 스크럼 상단의 네비게이션 바(헤더)에서, 로고는 왼쪽에 위치하며, 장바구니와 로그인과 회원가입 페이지 이동 링크는 오른쪽에 위치해 있다. 회원가입 Form이 수평적으로 화면 중간에 위치해 있다. (horizontal center) 로그인 Form…","html":"<h2>데일리 스크럼</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 상단의 네비게이션 바(헤더)에서, 로고는 왼쪽에 위치하며, 장바구니와 로그인과 회원가입 페이지 이동 링크는 오른쪽에 위치해 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 회원가입 Form이 수평적으로 화면 중간에 위치해 있다. (horizontal center)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 로그인 Form이 수평적으로 화면 중간에 위치해 있다. (horizontal center)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 로그인 여부에 따라 상단 헤더(navbar)의 목록이 달라진다 (예시: 로그인 상태에서는 로그아웃 버튼이 보이게, 로그아웃 상태에서는 로그인 버튼이 보이게 함) → 반쯤?</li>\n<li>홈\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 디자인 맞추기 1 ⚡️ → 이형민</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> header, footer 분리 1 ⚡️</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 목록 뷰 적용 → 나중에 꾸미기 3 (오피스아워 때)</li>\n</ul>\n</li>\n<li>로그인 플로우 ⭐️ → 김예리\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 로그인, 로그아웃 디자인 맞추기 1</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 로그인 했을 때 화면 변화 1</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 로그아웃 1</li>\n</ul>\n</li>\n<li>상품 목록 플로우\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 목록 페이지 2 💟 → 김예리</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 상세 페이지 2 ❇️ → 이형민</li>\n</ul>\n</li>\n</ul>\n<h3>오피스 아워</h3>\n<ul>\n<li>\n<p>로그인 여부는 <code class=\"language-text\">token</code>이 <code class=\"language-text\">localStorage</code>에 존재하는 지에 따라 파악했는데, 로그인 페이지와 회원 가입 페이지인 경우를 구분하려면 뭐가 좋을까요..?</p>\n<p>→ <code class=\"language-text\">window.location.href</code>로 우선 때려 박아서 페이지를 확인했습니다.</p>\n</li>\n<li>\n<p>프론트엔드는 이번 프로젝트를 진행하면서 협업 이외에 기술적인 역량(JS)을 쌓기 위해서 쇼핑몰 웹 서비스에 추가적으로 구현할만한 가치가 있는 부분은 어떤게 있을까요?</p>\n</li>\n<li>\n<p>특정 주제(예: ES6 기능들, 왜 TS를 사용하는지, 디자인 관련 등)에 대해 블로그 글을 작성하는 것이 좋다고 들었는데, …</p>\n</li>\n<li>\n<p>좋은 tool이나 extension 추천..</p>\n</li>\n</ul>\n<hr>\n<ol>\n<li>\n<p>프로젝트시 디자이너가 없을 때 좋은 방법이 뭐가 있을까요?</p>\n<p>→ 서비스 완성도도 중요하나, 코드에 우선순위를 짜는 것이 중요하다.</p>\n<p>→ 현존하는 쇼핑몰 웹사이트를 확인해보자! - 레퍼런스로 활용</p>\n</li>\n<li>\n<p>위와 연결된 질문으로 css 프레임워크(Bulma)를 사용하는 게 좀 더 좋을까요?</p>\n<p>→ 양자 택일을 요하는 질문이 많은데, 스택을 고르는데 정답은 없으며 프로젝트의 성격과 팀의 상황을 고려하여 적절한 합의와 최선의 선택만이 있을 뿐입니다. 프레임워크를 사용하면 특정 프레임워크를 배우는데 까지 필요한 <strong>러닝커브 등</strong>을 함께 고려하여 도입을 결정하는것이 좋습니다. 하지만, 이번 프로젝트의 목적이 기본적인 기술(js, css)을 제대로 숙련하는 것이라면 <strong>pure css 를 제대로 사용</strong>해보는것도 추천드립니다.</p>\n</li>\n<li>\n<p>airbnb ESLint를 잠깐 써봤는데 이게 허용이 안되는 이유가 왜일까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 허용안됨 왜일까요?</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> module <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 이건됩니다</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> module</code></pre></div>\n<p>→ <code class=\"language-text\">export default</code> 는 한 파일에서 **‘단 한 개의 기본 내보내기’**만 가능하며, import 하는 곳에서 {} 없이 바로 호출하여 사용가능합니다. default가 아닌 방식으로 내보내기 한 경우, 중괄호 안에 export 할때 사용한 변수 명을 적어서 import 하는 것이 문법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> MyDefaultExport\r\n\r\n<span class=\"token punctuation\">{</span> MyClass<span class=\"token punctuation\">,</span> MyOtherClass<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./MyClass\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/33611812/export-const-vs-export-default-in-es6\">https://stackoverflow.com/questions/33611812/export-const-vs-export-default-in-es6</a></p>\n</li>\n<li>\n<p>CSS 네이밍이나 컨벤션 같은 것 주로 어떻게 하시나요?</p>\n<p>→ CSS classname을 짓는일은 프론트엔드 개발자의 큰 고민중 하나 일 것입니다. 이러한 고민해결을 위해 OOCSS,BEM,SMACSS 등 여러가지의 표준이 이미 존재합니다. 저는 그 중 BEM방식에 대해 한번 공부해보시기를 권합니다. 모듈화와 재사용성을 위한 대표적인 방식입니다. <a href=\"http://getbem.com/introduction/\">http://getbem.com/introduction/</a></p>\n</li>\n<li>\n<p>CSS에서 dp, rem, vh/vw 등 여러 길이 단위가 있는데 뭘 사용하는 게 좋을지 모르겠습니다.</p>\n<p>→ css Unit에 관해 질문 주셨습니다. 일단은, 마찬가지로 정해진 정답은 없습니다. 다만, 상황에 맞는 선택이 있을 뿐입니다. 크게 절대적 unit인 <code class=\"language-text\">px</code> 와, 상대적 unit <code class=\"language-text\">%</code>, <code class=\"language-text\">v</code>, <code class=\"language-text\">em</code>, <code class=\"language-text\">rem</code> 등이 있을 것 같은데요. 상대적 unit 중에서도 <code class=\"language-text\">%</code>, <code class=\"language-text\">em</code> 은 부모 요소의 영향을 받고, <code class=\"language-text\">v</code>, <code class=\"language-text\">rem</code>은 브라우저 사이즈에 종속된다는 차이가 있습니다. 이러한 차이를 고려하여 서비스 특성에 맞게 선택적으로 사용하시면 되는데요. 자세한 예제는 아래의 영상이 큰 도움이 될 수 있을것같습니다.</p>\n<p>→ Best practice</p>\n<p><a href=\"https://www.youtube.com/watch?v=xWMKz9NCD0k\">https://www.youtube.com/watch?v=xWMKz9NCD0k</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=7Z3t1OWOpHo\">https://www.youtube.com/watch?v=7Z3t1OWOpHo</a></p>\n</li>\n<li>\n<p>선택자에서 <code class=\"language-text\">id</code>와 <code class=\"language-text\">class</code> 중 어느 것을 사용하는 것이 현명한지 궁금합니다.</p>\n<p>→ id는 특정 한 요소에만, class는 여러요소에 중복사용가능한 스타일 정의법이라는 차이가 있습니다. 이 역시 양자택일 한다기 보다는 각각의 특성을 적절히 활용하면 됩니다. 반복적으로 사용되는 스타일에는 class를 이용하여 정의하고, 그 내부에 세부 스타일을 정의할 때 id를 사용해주면 효과적일 수 있습니다. 스타일링 우선 순위는 id>class>tag 순 입니다.</p>\n<p><a href=\"https://www.educative.io/edpresso/class-and-id-selectors-in-css\">https://www.educative.io/edpresso/class-and-id-selectors-in-css</a></p>\n<p>→ CaSS, Styled Component 등 Framework … Nesting을 활용해 더 쉽게</p>\n</li>\n<li>\n<p><code class=\"language-text\">grid</code>, <code class=\"language-text\">flex</code> 두 개 중 어떤게 많이 쓰일까요?</p>\n<p>→ <code class=\"language-text\">grid</code>와 <code class=\"language-text\">flex</code> 모두 레이아웃을 구현하기 위해 아주 많이 사용됩니다. 언제 각각을 사용하면 좋을지에 대해서는 아래 mdn 사이트 답변을 참고해주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A simple question to ask yourself when deciding between grid or flexbox is:\r\n\r\ndo I only need to control the layout by row or column – use a flexbox\r\ndo I need to control the layout by row and column – use a grid</code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#one-dimensional_versus_two-dimensional_layout\">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#one-dimensional_versus_two-dimensional_layout</a></p>\n<p><a href=\"https://studiomeal.com/archives/533\">https://studiomeal.com/archives/533</a></p>\n</li>\n<li>\n<p>프론트엔드는 이번 프로젝트를 진행하면서 협업 이외에 기술적인 역량(JS)을 쌓기 위해서 쇼핑몰 웹 서비스에 추가적으로 구현할만한 가치가 있는 부분은 어떤게 있을까요?</p>\n<p>→ <strong>기본에 충실</strong>하자</p>\n</li>\n<li>\n<p>공통된 것들은 주로 컴포넌트화를 하려고 하고, Navigation에 적용해보았는데 괜찮은 방법인지 궁금합니다.</p>\n<p>→ 레이아웃 시프트가 발생할 수 있다. visibility 속성..</p>\n<p>→ 클래스 활용?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Nav</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">isLoggedIn<span class=\"token punctuation\">,</span> page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> loginMenu <span class=\"token operator\">=</span> isLoggedIn\r\n    <span class=\"token operator\">?</span> <span class=\"token string\">\"&lt;li>&lt;a>로그아웃&lt;/a>&lt;/li>\"</span>\r\n    <span class=\"token operator\">:</span> <span class=\"token string\">'&lt;li>&lt;a href=\"/login\">로그인&lt;/a>&lt;/li>'</span>\r\n  <span class=\"token keyword\">let</span> menu <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">===</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    menu <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n   &lt;li>&lt;a href=\"/register\">회원가입&lt;/a>&lt;/li>\r\n   &lt;li>&lt;a href=\"#cart\">장바구니&lt;/a>&lt;/li>\r\n   </span><span class=\"token template-punctuation string\">`</span></span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">===</span> <span class=\"token string\">\"Register\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    menu <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n   </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>loginMenu<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\r\n   &lt;li>&lt;a href=\"#cart\">장바구니&lt;/a>&lt;/li>\r\n   </span><span class=\"token template-punctuation string\">`</span></span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n    menu <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n   </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>loginMenu<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\r\n   &lt;li>&lt;a href=\"/register\">회원가입&lt;/a>&lt;/li>\r\n   &lt;li>&lt;a href=\"#cart\">장바구니&lt;/a>&lt;/li>\r\n   </span><span class=\"token template-punctuation string\">`</span></span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n   &lt;div class=\"navContainer\">\r\n     &lt;div class=\"navBrand\">\r\n       &lt;a href=\"/\">&lt;span>Marvel Store&lt;/span>&lt;/a>\r\n     &lt;/div>\r\n \r\n     &lt;div class=\"navMenuContainer\">\r\n       &lt;ul id=\"navMenuList\">\r\n         </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>menu<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\r\n       &lt;/ul>\r\n     &lt;/div> \r\n   &lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Nav</code></pre></div>\n</li>\n<li>\n<p>package-lock.json 파일도 .gitignore에 추가해야하는지 궁금합니다.</p>\n</li>\n</ol>","frontmatter":{"title":"[Elice SW 2기] mini-log 쇼핑몰 웹 서비스 제작 프로젝트","date":"May 24, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, HTML, CSS, JavaScript, OOP, Node.js, modules, npm, express.js, REST API, MongoDB, mongoose"}},"previous":{"fields":{"slug":"/2022-05-23/"},"frontmatter":{"title":"[Elice SW 2기] mini-log 쇼핑몰 웹 서비스 제작 프로젝트"}},"next":null},"pageContext":{"id":"7d4c9768-f5b7-58e4-9724-c5ef1f7edea3","previousPostId":"ca21fabe-a03a-58d5-9a4f-dfcc8aa4c2b4","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}