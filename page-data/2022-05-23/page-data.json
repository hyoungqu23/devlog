{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-05-23/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"ca21fabe-a03a-58d5-9a4f-dfcc8aa4c2b4","excerpt":"QR 체크인(09:50 ~ 10:10) QR 체크아웃(17:50 ~ 19:00) 화, 목, 금 과제 제출은 18:00까지 제출. 프로젝트 안내 및 git 강의 프로젝트 안내 Demo…","html":"<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <strong>QR 체크인(09:50 ~ 10:10)</strong></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <strong>QR 체크아웃(17:50 ~ 19:00)</strong></li>\n</ul>\n<p><strong>화, 목, 금 과제 제출은 18:00까지 제출.</strong></p>\n<h3>프로젝트 안내 및 git 강의</h3>\n<p><strong>프로젝트 안내</strong></p>\n<p><strong><a href=\"http://shopping-demo.elicecoding.com/\">Demo</a></strong></p>\n<ul>\n<li><strong>기능 확인</strong>\n<ul>\n<li>이미지 슬라이드</li>\n<li>카카오, 구글, 네이버 회원 가입/로그인</li>\n<li>장바구니 - 개수 조정</li>\n<li>장바구니 - 전체 선택, 품절 삭제, 선택 삭제 등</li>\n<li>회원 정보 수정</li>\n</ul>\n</li>\n</ul>\n<p><strong>프론트엔드 디렉토리 구조</strong></p>\n<ul>\n<li>\n<p>디렉토리</p>\n<p>src\r\n⨽ views\r\n⨽ home\r\n⨽ home.html, home.css, home.js\r\n⨽ login\r\n⨽ login.html, login.css, login.js\r\n⨽ register\r\n⨽ register.html, register.css, register.js\r\n⨽routers\r\n⨽ views-router.js</p>\n</li>\n</ul>\n<p><strong>프론트엔드 요구 역량</strong></p>\n<ul>\n<li>JavaScript, HTML/CSS 개발 경험</li>\n<li>최신 ECMAScript 기능 사용 경험(ES2016 이상)</li>\n<li>React, Next.js 등의 프레임워크 기반 개발 경험</li>\n</ul>\n<p><strong>git과 버전 관리</strong></p>\n<ul>\n<li>코드의 버전 관리 시스템. Commit의 모음.</li>\n<li>Branch를 활용해 각자 Commit을 쌓아 나갈 수 있다.</li>\n<li>Master/Main Branch에 Feature Branch를 만들어 merge하면 합쳐진다.</li>\n<li>이전 버전도 제공해야 하기 때문에 이전 버전은 그대로 두고, 새로운 버전은 Branch를 만들어서 그 중에서 Feature Branch를 만들어나간다.</li>\n<li>Master Branch: v4(현재 버전)\r\n⬆️\r\nDev Branch: v5(미래 버전)\r\n⬆️\r\nFeature Branch: 기능 개발</li>\n<li>코드 리뷰는 Dev Branch → Master Branch로</li>\n<li>MR할 때는 gitlab에서 메모를 작성하면서 하는 것이 좋다.</li>\n</ul>\n<p><strong>Terminal</strong></p>\n<ul>\n<li>\n<p>Terminal Commands</p>\n<ul>\n<li>\n<p>Virtual Machine</p>\n</li>\n<li>\n<p><code class=\"language-text\">touch</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">ctrl + c</code> → 취소</p>\n</li>\n<li>\n<p><code class=\"language-text\">clear</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">ls</code> 리스트</p>\n</li>\n<li>\n<p><code class=\"language-text\">rm</code> 삭제</p>\n</li>\n<li>\n<p><code class=\"language-text\">-r</code> 반복 옵션(디렉토리 내의 모든 파일 삭제)</p>\n</li>\n<li>\n<p>기본 코드 링크</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Sign in](https://kdt-gitlab.elice.io/sw_track/class_02_seoul/web_project/shopping-mall-racer)</code></pre></div>\n</li>\n<li>\n<p>Clone with HTTPS</p>\n</li>\n<li>\n<p><code class=\"language-text\">git clone HTTPS Clone Link</code></p>\n</li>\n<li>\n<p>Username: @…(@ 제외)</p>\n</li>\n<li>\n<p>Password: gitlab password</p>\n</li>\n<li>\n<p><code class=\"language-text\">cd</code> 디렉토리 변경</p>\n</li>\n<li>\n<p><code class=\"language-text\">-al</code> 모두 옵션(숨김처리 된 파일도 확인 → <code class=\"language-text\">.git</code>, <code class=\"language-text\">.env</code>, <code class=\"language-text\">.cache</code> 등 <code class=\"language-text\">.</code> 을 활용)</p>\n</li>\n<li>\n<p><code class=\"language-text\">rm -rf .git</code> 해당 폴더 전체 삭제 → 복제한 링크의 레포지토리와 연결 끊기</p>\n</li>\n<li>\n<p>Push an existing folder 진행</p>\n</li>\n<li>\n<p><code class=\"language-text\">git init</code> → 새로 git 시작(<code class=\"language-text\">.git</code> 생성)</p>\n</li>\n<li>\n<p><code class=\"language-text\">git remote add origin 해당 레포지토리 HTTPS 주소</code> → 해당 원격 레포지토리와 연결, 이름은 <code class=\"language-text\">origin</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">git add .</code> → 모든 파일 staging</p>\n</li>\n<li>\n<p><code class=\"language-text\">git commit -m “Initial Commit”</code> → 커밋하기</p>\n</li>\n<li>\n<p><code class=\"language-text\">git config —global user.email “가입 이메일”</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">git config —global user.name “가입 이름”</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">git push -u origin master</code> → 커밋한 파일 원격 <code class=\"language-text\">origin</code>의 <code class=\"language-text\">master Branch</code>에 <code class=\"language-text\">push</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">보통 `git push -u origin dev`로 하여 `dev Branch`에 `push`한다.</code></pre></div>\n</li>\n<li>\n<p>몽고디비 아틀라스 연결</p>\n</li>\n<li>\n<p>마무리되면 dev Branch 생성 → feature Branch 생성 → 개발 → feature Branch를 dev Branch로 머지</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q &#x26; A</strong></p>\n<p><strong>Q) 백, 프론트구분해서 브랜치를 나누고싶다면 어떻게 해야 하나요?? feature이하로 브랜치를 더 나눠도 되나요?</strong></p>\n<p>→ Branch 네이밍은 자유롭게 규칙을 정해도 상관 없다.</p>\n<p><strong>Q) 사소한 이슈도 많이 올리면 좋다고 하셨는데 깃랩에 이슈를 등록할 때 팀원들과 상의한 후 올리나요?</strong></p>\n<p>→ 이슈는 무관하다.</p>\n<p><strong>Q) 마일스톤은 어떤 용도로 사용하는게 좋은가요?</strong></p>\n<p>→ 이슈를 모아 두는 그릇, 기한과 큰 목표를 설정할 수 있다. 기한이 핵심!</p>\n<hr>\n<h3>데일리 스크럼</h3>\n<ul>\n<li>\n<p>개발 환경 구축</p>\n<ul>\n<li>\n<p><code class=\"language-text\">git clone</code> 하기</p>\n</li>\n<li>\n<p>MongoDB 연결하기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Cloud: MongoDB Cloud](https://cloud.mongodb.com/v2/628b0c6a6e155d3d0c1c1485#clusters)</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">git pull</code> 은 어떻게..?</p>\n</li>\n</ul>\n</li>\n<li>\n<p>코드 구조 분석</p>\n<p><strong>FE</strong></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/538892ab-3684-4338-922d-38c5e670fe61/Untitled.png\" alt=\"Untitled\"></p>\n</li>\n<li>\n<p>전체 페이지 분석</p>\n<ul>\n<li>HOME\n<ul>\n<li>로고 | 회원 가입 | 로그인 | 장바구니</li>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>Sticky Header..?</li>\n<li>카테고리 슬라이더</li>\n</ul>\n</li>\n<li>회원 가입 페이지\n<ul>\n<li>로고 | 로그인 | 장바구니</li>\n<li>회원가입 폼\n<ul>\n<li>이름</li>\n<li>이메일</li>\n<li>비밀번호</li>\n<li>비밀번호 확인</li>\n</ul>\n</li>\n<li>소셜 로그인</li>\n<li>친구 초대 추천인 아이디 → 할인 쿠폰 (?)</li>\n</ul>\n</li>\n<li>로그인 페이지\n<ul>\n<li>로고 | 회원 가입 | 장바구니</li>\n<li>아이디, 비밀번호 찾기</li>\n<li>소셜 로그인 기능</li>\n</ul>\n</li>\n<li>계정 관리 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>주문 조회</li>\n<li>회원 정보 관리</li>\n<li>제품 판매</li>\n<li>회원 탈퇴</li>\n</ul>\n</li>\n<li>주문 조회 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>주문 조회 리스트(날짜, 주문 정보, 상태, 주문 취소 버튼)</li>\n</ul>\n</li>\n<li>제품 판매 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>제품 판매 폼(제품명, 카테고리(select), 제조사, 요약 설명, 상세 설명, 제품 사진 업로드, 재고 수, 가격, 검색 키워드 추가)</li>\n<li>제품 판매하기 버튼</li>\n</ul>\n</li>\n<li>회원 정보 관리\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>회원 정보 수정 폼(이름, 비밀번호, 비밀번호 확인, 주소, 전화번호)</li>\n<li>토글</li>\n<li>저장하기(회원 정보 수정) 버튼</li>\n</ul>\n</li>\n<li>회원 탈퇴 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>비밀번호 입력 폼</li>\n<li>회원 탈퇴 버튼</li>\n</ul>\n</li>\n<li>상품 목록 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>상품 목록(이미지, 상품명, 추천, 요약 설명, 가격)</li>\n<li>페이지네이션</li>\n<li>찜 버튼(?)</li>\n</ul>\n</li>\n<li>상품 상세 정보 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>이미지들(슬라이더)</li>\n<li>제조사, 상품명, 추천, 가격, 상세 설명 등 상세 데이터</li>\n<li>장바구니 버튼, 구매하기 버튼</li>\n<li>리뷰..?</li>\n</ul>\n</li>\n<li>장바구니 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>장바구니에 넣은 목록</li>\n<li>전체 선택, 선택 삭제, 품절 삭제 버튼</li>\n<li>수량 변경 기능</li>\n<li>결제 정보 데이터</li>\n<li>구매하기 버튼</li>\n</ul>\n</li>\n<li>주문 결제 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>배송지 정보 입력 폼(이름, 연락처, 주소, 요청사항(select))</li>\n<li>주소 찾기 API</li>\n<li>결제 정보 데이터</li>\n<li>결제하기 버튼</li>\n</ul>\n</li>\n<li>주문 완료 페이지\n<ul>\n<li>로고 | 계정 관리 | 로그아웃 | 장바구니</li>\n<li>주문 내역 보기 버튼</li>\n<li>쇼핑 계속하기 버튼</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>핵심 기능 확인하기</p>\n<ol>\n<li>회원가입, 로그인, 회원정보 수정 등 <strong>유저 정보 관련 CRUD</strong></li>\n<li><strong>제품 목록</strong>을 조회 및, <strong>제품 상세 정보</strong>를 조회 가능함.</li>\n<li>장바구니에 제품을 추가할 수 있으며, <strong>장바구니에서 CRUD</strong> 작업이 가능함.</li>\n<li>장바구니는 서버 DB가 아닌, 프론트 단에서 저장 및 관리됨 (localStorage, indexedDB 등)</li>\n<li>장바구니에서 주문을 진행하며, <strong>주문 완료 후 조회 및 삭제</strong>가 가능함.</li>\n</ol>\n</li>\n<li>\n<p>Flow 별 구분하기</p>\n<ul>\n<li>순서 정하기\n<ul>\n<li>로그인 + 홈, 상품 목록, 상품 상세</li>\n<li>장바구니, 주문 결제, 결제 완료</li>\n<li>관리 페이지</li>\n</ul>\n</li>\n<li>Flow 사이에 에러 핸들링 해보기</li>\n</ul>\n</li>\n<li>\n<p>라벨 정하기</p>\n<ul>\n<li>업무별, 이름별, 우선순위별 등…</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>오피스아워</h3>\n<ul>\n<li>\n<p>상품 등록 REST API를 작성하려고 하는데, 상품 등록 api 작성시 경로명을 어떻게 적어야 할까요? <code class=\"language-text\">home/api/product/등록</code> 이런식으로 작성해도 괜찮을까요?</p>\n<ul>\n<li>기업마다 다른 규칙이 있다.</li>\n<li>RESTful API</li>\n<li>행위 자체의 표현은 HTTP 메서드로 설명</li>\n<li>행위의 대상이 되는 자원을 경로로 작성</li>\n<li><code class=\"language-text\">POST /user</code> → <code class=\"language-text\">POST /user/sign-up</code> 이렇게 할 수도 있다.</li>\n<li>다만, 간결하게 작성하는 것이 더 좋다. → 장점: 규칙성,</li>\n<li><code class=\"language-text\">POST /product</code></li>\n<li><code class=\"language-text\">GET /product/1</code></li>\n<li><code class=\"language-text\">PUT /product/1</code></li>\n</ul>\n</li>\n<li>\n<p>제품 사진을 데이터베이스에 등록하려고 할 때 사진은 어떻게 저장해야 하나요?\r\n이미지 파일 자체를 넣어야 할까요, 아니면 경로를 설정해서 경로를 저장해야 할까요?\r\n스키마 작성을 어떻게 해야할지 잘 모르겠습니다.</p>\n<ul>\n<li>\n<p>사진 자체를 외부 저장소에 업로드 후 접근 URL로 저장</p>\n<ul>\n<li>\n<p>AWS S3 bucket 등</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  → `aws-sdk` 기반으로 `.env`에 AWS ID, PW 삽입해 연동.</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>이미지 파일을 base64 기반 문자열로 변환하여 저장하여 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">→ 별로 사용하지 않음.</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>스키마를 작성할 때 검색 키워드(해쉬태그 기능)는 어떻게 구성해야할지 모르겠습니다. list 형식으로 만드는게 좋을까요?</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d9a230bd-afe6-45c8-832c-26b4aab347da/Untitled.png\" alt=\"Untitled\"></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e4eea8ae-c927-4f96-9180-502d3a4e4afa/Untitled.png\" alt=\"Untitled\"></p>\n</li>\n<li>\n<p>회원정보 암호화 에 대해 궁금한점이 있습니다 일단 벡엔드에서 hash를 활용해 암호화를 하는데 프론트단에서도 해야하는기 궁금합니다</p>\n<ul>\n<li>\n<p>백엔드에서만 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">→ password → HASH → HashPassword</code></pre></div>\n</li>\n<li>\n<p>프론트엔드에서는 password를 암호화하여 저장된 암호화 값과 비교만 한다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>여기서 어떤걸 백엔드에서 추가하면 포트폴리오 에서 경쟁력있을까요? test 코드, 기능적인거 무엇이든지 궁금합니다.</p>\n<ul>\n<li>테스트 코드</li>\n<li>기본적인 AWS 서비스 활용: S3, EC2, RDS 등</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>개인적으로 tdd에 로망이 있는데 이런 소규모에 빠른 시간 안에 만들어야하는 프로젝트에도 tdd가 적합할까요?</p>\n<ul>\n<li>\n<p>테스트 코드를 작성하는 것이 시간, 비용이 들기 때문에 필수적이지 않다.</p>\n</li>\n<li>\n<p>TDD 도입 이유: 계획적, 안정적…</p>\n<ul>\n<li>\n<p>유닛 테스트 - 함수 등</p>\n</li>\n<li>\n<p>통합 테스트 - API 등</p>\n</li>\n<li>\n<p>시간 없으면 통합 테스트 우선</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cceb122a-1333-49b7-836d-86fbb5c549c3/Untitled.png)</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>백엔드 개발을 하면서 역할을 분배 해야하는게 어떤식으로 현업에서는 분배하는지 궁금합니다? 기능별로?</p>\n<ul>\n<li>\n<p>스타트업의 경우, 기업과 상황에 따라 상이</p>\n<ul>\n<li>회사 내 서비스가 여럿 → 서비스 단위</li>\n<li>앱, 콘솔 단위</li>\n<li>기능 단위</li>\n<li>API 등 로직, 인프라 구축, 데이터베이스 등 전문성 단위</li>\n</ul>\n<p>→ <strong>모듈</strong> 단위를 추천..</p>\n</li>\n</ul>\n</li>\n<li>\n<p>기타 질문</p>\n<ol>\n<li>\n<p>스크럼</p>\n<ul>\n<li>할 일</li>\n<li>회고</li>\n</ul>\n</li>\n<li>\n<p>암호화</p>\n<ul>\n<li>비밀번호 말고는 제외</li>\n</ul>\n</li>\n<li>\n<p>관리자 계정</p>\n<ul>\n<li>true, false로 처리해도 된다.(<code class=\"language-text\">isAdmin</code> 필드 활용)</li>\n</ul>\n</li>\n<li>\n<p>Nest.js</p>\n<ul>\n<li>백오피스, 혹은 작은 기업에서 안정성을 위해</li>\n</ul>\n</li>\n<li>\n<p>코드 컨벤션</p>\n<ul>\n<li>ESlint</li>\n</ul>\n</li>\n<li>\n<p>typescript</p>\n<ul>\n<li>필수</li>\n</ul>\n</li>\n<li>\n<p>multipart form-data</p>\n</li>\n<li>\n<p>블로그</p>\n<p>스키마, DB 등 왜 그렇게 구성했는지</p>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3>FE Flow 확인하기</h3>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ddacde80-3cb4-4037-b13c-b8aae8f19163/Untitled.png\" alt=\"Untitled\"></p>\n<hr>\n<ul>\n<li>다른 프론트엔드 팀 이슈 확인하기\n<ul>\n<li>메인 페이지 이미지 슬라이더 기본 레이아웃 구성</li>\n<li>모바일 화면 우측 메뉴 기능 구현</li>\n<li>모바일 사이드 메뉴 토글 구현</li>\n<li>Header 기본 레이아웃 구성, navbar sticky, top &#x26; bottom 버튼 구현</li>\n<li>local storage vs session storage</li>\n<li>ESLint or prettier → 시간 너무 걸리면 필수 기능 개발 후 나중에 시간 남으면 설정\n<ul>\n<li>저장 시 ESLint 실행 &#x26; 설정 파일을 git에 포함(<a href=\"https://velog.io/@yunkuk/%EB%84%8C-%EB%AA%BB%EC%A7%80%EB%82%98%EA%B0%84%EB%8B%A4.-eslint-prettier-%EB%AC%B4%ED%95%9C-%ED%9B%88%EC%88%98-%EC%B6%A9%EB%8F%8C\">prettier와 eslint 충돌 해결하는 방법</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Elice SW 2기] mini-log 쇼핑몰 웹 서비스 제작 프로젝트","date":"May 23, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, HTML, CSS, JavaScript, OOP, Node.js, modules, npm, express.js, REST API, MongoDB, mongoose"}},"previous":{"fields":{"slug":"/2022-05-13/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #030 : Node.js Express.js와 MongoDB 4"}},"next":{"fields":{"slug":"/2022-05-24/"},"frontmatter":{"title":""}}},"pageContext":{"id":"ca21fabe-a03a-58d5-9a4f-dfcc8aa4c2b4","previousPostId":"ca32effb-9507-579f-9a9b-169d75aa4b60","nextPostId":"7d4c9768-f5b7-58e4-9724-c5ef1f7edea3"}},
    "staticQueryHashes": ["2841359383","3257411868"]}