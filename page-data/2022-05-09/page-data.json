{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-05-09/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"1bd8cd2f-f16d-5e57-b242-5de339ad09fe","excerpt":"00. npm Node Package Manager로, Module(예시: , (sns…","html":"<h2>00. npm</h2>\n<p>Node Package Manager로, Module(예시: <a href=\"https://www.npmjs.com/package/lite-server\"><code class=\"language-text\">lite-server</code></a>, <a href=\"https://www.npmjs.com/package/passport\"><code class=\"language-text\">passport</code></a>(sns 로그인) 등)을 사용할 때 활용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">npm init</code></pre></div>\n<p>세부 설정을 마치면 <code class=\"language-text\">package.json</code>이 생성된 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodejs\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node practice\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">scripts</code>에서 명령어를 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lite-server\"</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>다음 명령어를 통해 특정 모듈을 설치할 수 있다. 그렇게 되면 <code class=\"language-text\">node_modules</code> 디렉토리가 생성되고, 필요한 파일이 설치된다. 또한, <code class=\"language-text\">package-lock.json</code> 파일이 생성되는데, <code class=\"language-text\">package.json</code> 두 가지 파일을 통해 협업 시 공유할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">npm install</code></pre></div>\n<p>우리는 <code class=\"language-text\">package.json</code>에서 프로젝트가 어떤 패키지를 활용하고 있는지를 확인할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">dependencies</code>: 실제 서버와 개발 환경에서 모두 활용하는 것.</li>\n<li><code class=\"language-text\">devDependencies</code>: 개발 환경에서만 활용하는 package. (<code class=\"language-text\">--save-dev</code> 옵션으로 설치)\r\n다만, Docker로 인해 가상 개발 환경이 활성화되면서, <code class=\"language-text\">devDependencies</code>는 유명무실해지는 추세이다.</li>\n</ul>\n<blockquote>\n<p>package.json</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodejs\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node practice\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lite-server\"</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"lite-server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.6.1\"</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 명령어로 특정 package를 제거할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">npm remove</code></pre></div>\n<p><code class=\"language-text\">-g, --global</code> 옵션을 활용해 전역에서 설치할 수 있다.</p>\n<blockquote>\n<p>참고 - 서버는 서비스를 운영하는데, 운영을 위해 접속 관리, 다중 접속 관리가 중요하다. 따라서 pm2, forever 등의 운영을 위한 package를 설치하는데, 이때 전역적으로 설치한다.</p>\n</blockquote>\n<h3><a href=\"https://www.npmjs.com/package/lite-server\">lite-server</a></h3>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">npm i lite-server</code></pre></div>\n<p><code class=\"language-text\">scripts</code>에서 시작 명령어를 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lite-server\"</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>다음 명령어를 통해 <code class=\"language-text\">lite-server</code>를 시작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">npm start</code></pre></div>\n<p>다만, <code class=\"language-text\">http://localhost:3000/</code>이 열리면, 에러가 발생한다. 해당 에러는 <code class=\"language-text\">404 get 에러</code>로, <code class=\"language-text\">404 GET /index.html, 404 GET /favicon.ico</code>가 존재하지 않기 때문이다.</p>\n<p><code class=\"language-text\">index.html</code>을 생성한 후 다시 서버를 재시작하면 제대로 에러 없이 시작되는 것을 알 수 있다.</p>\n<blockquote>\n<p>추후 설명 - Status Code: 200(정상), 404(에러), 500(읽어야 할 파일이 존재하지 않음(경로 에러 등))\r\n<strong>Status Code</strong>를 잘 확인하는 것이 중요하다!</p>\n</blockquote>\n<h2>Module</h2>\n<p>라이브러리라고도 불리는 module은 중복되는 기능이나 지속적으로 활용해야 하는 기능을 반복적으로 사용할 수 있게끔 만드는 코드를 말한다.</p>\n<h3>Module 만들어보기</h3>\n<blockquote>\n<p>module.exports.내보내는 이름 = 작성된 이름;</p>\n</blockquote>\n<p>이러한 형식을 통해 만들어낸 모듈을 다른 파일에서 불러와 활용할 수 있다.</p>\n<blockquote>\n<p>calc.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\r\n<span class=\"token punctuation\">}</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> add</code></pre></div>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> calc <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./calc\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// calc.js 처럼 확장자를 끝까지 작성하지 않아도 된다.</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">node app</code></pre></div>\n<p>해당 명령어를 통해 JavaScript 파일을 실행할 수 있다.</p>\n<h3>module을 내보내는 다른 방법</h3>\n<p>객체로도 내보낼 수 있다.</p>\n<blockquote>\n<p>calc.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">add1</span><span class=\"token operator\">:</span> add<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">sub</span><span class=\"token operator\">:</span> sub<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">mul</span><span class=\"token operator\">:</span> mul<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">div</span><span class=\"token operator\">:</span> div<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단순히 함수만이 아니라 숫자, 문자열 등 변수를 내보낼 수도 있다.</p>\n<blockquote>\n<p>func.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>추가적인 기능(1 더하기 등)을 활용해 내보내면서 적용할 수 있다. 다만, 같은 기능을 여러번 중복적으로 활용하고자 한다해도 이러한 방식으로는 사용할 수 없다.</p>\n<p><code class=\"language-text\">require</code>의 특성상 한 번 호출된 후 바로 삭제한다. 따라서 기능을 반복적으로 활용할 수는 없다. 즉, for 반복문에서 10번 호출되고 삭제되기 때문에 1이 계속 출력된다.</p>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./func\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다만, 함수로 내보내는 경우 삭제되지 않고 남아있기 때문에 중복된 기능을 활용할 수 있게 된다.</p>\n<blockquote>\n<p>func.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 기능을 공유하기 때문에 number도 자연스럽게 활용이 가능하다.</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./func\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// console.log(func);</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"[Elice SW 2기] mini-log #026 : Node.js와 npm 그리고 modules","date":"May 09, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, HTML, CSS, JavaScript, OOP, Node.js, modules, npm"}},"previous":{"fields":{"slug":"/2022-05-06/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #025 : TypeScript Interface & Generic"}},"next":null},"pageContext":{"id":"1bd8cd2f-f16d-5e57-b242-5de339ad09fe","previousPostId":"d3f58e0b-4354-5af5-8f64-552f731d15b9","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}