{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-04-22/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"ac159bc0-e38c-5551-9344-971545baf744","excerpt":"JavaScript 실행의 이해 01. JavaScript 변수 정의 과정 JavaScript Engine JavaScript Engine은 JavaScript 코드를 읽어 실행하는 프로그램으로, 작성된 JavaScript 코드가 JavaScript Engine…","html":"<h2>JavaScript 실행의 이해</h2>\n<h3>01. JavaScript 변수 정의 과정</h3>\n<h4>JavaScript Engine</h4>\n<p>JavaScript Engine은 JavaScript 코드를 읽어 실행하는 프로그램으로, 작성된 JavaScript 코드가 JavaScript Engine을 통해 <a href=\"https://oneroomtable.tistory.com/entry/%ED%8C%8C%EC%8B%B1%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-%EB%B2%88%EC%97%AD\">파싱</a>(<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Parse\">parsing</a>)되고 실행된다. 즉, 작성된 코드는 JavaScript Engine에 의해 AST 형식으로 파싱되고, Compiler가 읽어 머신 코드로 변경해준 후 컴퓨터 CPU에 의해 실행된다.</p>\n<h4>Node.js</h4>\n<p>Node.js는 브라우저 외부 환경에서 JavaScript 코드를 실행하도록 하는 프로그램이다.</p>\n<h4>JavaScript 코드의 실행 순서</h4>\n<ol>\n<li>\n<p>JavaScript Engine은 코드의 실행 이전 Execution Context를 생성한다.</p>\n</li>\n<li>\n<p>생성 단계에서 JavaScript Engine은 변수 선언을 읽는다.(<code class=\"language-text\">a</code>, <code class=\"language-text\">b</code> 등이 Variable Object에 등록된다.)</p>\n<ul>\n<li>JavaScript Engine은 생성 단계에서 함수 선언문, 함수 표현식, 변수 등을 읽어 Execution Context에 저장한다.</li>\n<li>변수의 경우, Execution Context의 Lexical Environment를 구성한다.</li>\n<li>함수 선언문 외에 변수는 값이 저장되지 않는다. 즉, 함수는 객체 전체가 저장되나, 변수는 값이 저장되지 않고, 할당 공간만 생성된다.</li>\n<li>이러한 경우, <code class=\"language-text\">var</code> 변수는 undefined, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>는 <code class=\"language-text\">uninitialized</code> 값으로 초기화된다.</li>\n</ul>\n</li>\n<li>\n<p>실행 단계에서 JavaScript Engine은 변수의 값을 할당한다.(<code class=\"language-text\">10</code>, <code class=\"language-text\">20</code> 등 값이 Variable Object에 이미 등록된 <code class=\"language-text\">a</code>, <code class=\"language-text\">b</code> 등에 할당된다.)</p>\n<ul>\n<li>JavaScript Engine은 변수에 값을 할당하는 구문을 만나면 Execution Context에 값을 저장한다.</li>\n<li>그 외 코드를 한 줄씩 읽어 나가며 실행한다.</li>\n</ul>\n</li>\n</ol>\n<h4>Lexical Environment</h4>\n<p>함수가 사용되는 변수들을 둘러싼 환경을 의미한다. 따라서 특정 변수의 값은 함수의 Lexical Environment 안에서 찾을 수 있다. 즉, Execution Context 내부에 정의된 Variable Object로 이해할 수 있다. 이때, Lexical Environment는 Scope Chain을 포함해, 외부에서 선언된 변수의 값을 참조할 수 있다.</p>\n<h3>02. Hoisting</h3>\n<p>JavaScript Engine이 코드를 읽으면, 생성 단계에서 Execution Context를 생성하고, 함수 선언문은 실행 단계에서 전체가 저장된다. 이와 달리 <code class=\"language-text\">var</code> 변수는 저장 시 <code class=\"language-text\">undefined</code>로, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> 변수는 초기화되지 않는다. 초기화되지 않은 변수에 접근하면 에러가 발생한다.</p>\n<p>Hoisting은 변수가 선언된 시점보다 앞서서 사용될 때 발생한다. <code class=\"language-text\">var</code> 변수가 생성 단계에서 undefined로 초기화되기 때문에 발생한다. 함수는 생성 단계에서 함수 전체에 저장되기 때문에 뒤에서 선언되더라도 호출이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 달리 let, const 변수는 생성 단계에서 초기화되지 않는다. 따라서 선언 이전에 접근하면 Reference Error가 발생한다. 즉, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>는 Hoisting이 발생하지 않는다.(이 경계 구간, 즉 사용될 때부터 선언되기 전까지의 구간을 TDZ, Temporal Dead Zone이라 한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>var와 let의 Scope</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">varFor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">letFor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">varFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 3 3</span>\r\n<span class=\"token function\">letFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 1 2</span></code></pre></div>\n<p><code class=\"language-text\">var</code> 변수로 선언된 <code class=\"language-text\">i</code>는 <code class=\"language-text\">setTimeout()</code> 함수가 반복문을 돌며 3번 실행되고, <code class=\"language-text\">for</code>문이 종료된 시점에도 소멸하지 않는 반면, <code class=\"language-text\">let</code>으로 선언된 <code class=\"language-text\">i</code>의 경우에는 하나의 반복문 Block마다 소멸하고 그때의 화살표 함수 closure에 저장된다.</p>\n<p>즉, <code class=\"language-text\">var</code> 변수는 function varFor에 존재하는 변수이고, <code class=\"language-text\">let</code> 변수는 for Loop에 존재하는 변수이기 때문에 차이를 보이는 것이다.</p>\n<h3>03. JavaScript 내장 객체</h3>\n<h4>globalThis</h4>\n<p>globalThis는 전역 객체를 지칭하는 변수로, 환경에 따라 다른 전역 객체(브라우저에서는 <code class=\"language-text\">window</code>, Node에서는 <code class=\"language-text\">global</code>)를 통일하여 하나의 변수로 환경에 맞는 전역 객체를 가리킬 수 있게 한다.</p>\n<h4>window</h4>\n<p>DOM Document를 포함하는 창을 나타내는 개체로, 전역 Scope에서 선언된 변수는 모두 window 객체의 property가 된다. 현재 창의 정보를 얻거나, 창을 조작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> targetURL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.naver.com\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> windowSize <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">height=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, width=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 현재 창과 동일한 크기 설정</span>\r\n<span class=\"token comment\">// const windowSize = `height=${globalThis.innerHeight}, width=${globalThis.innerWidth}`;      // 여기서 globalThis = window를 의미함</span>\r\n\r\nglobalThis<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>    <span class=\"token comment\">// 새로운 창을 여는 함수</span>\r\n  targetURL<span class=\"token punctuation\">,</span>\r\n  <span class=\"token string\">\"Target\"</span><span class=\"token punctuation\">,</span>\r\n  windowSize\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Document</h4>\n<p>브라우저에 로드된 웹 페이지 즉, HTML 문서 자체를 표현하는 객체로, 문서의 title, URL 등의 정보를 얻거나, element의 생성, 검색 등의 기능을 제공한다. Document 객체를 통해 JavaScript만으로 요소를 구성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printDocumentInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문서 URL: \"</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문서 title: \"</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  console<span class=\"token punctuation\">.</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"모든 Node:\"</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">createTodolist</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todos</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> todos\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Li\"</span><span class=\"token punctuation\">)</span>\r\n      li<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token keyword\">return</span> li\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ul<span class=\"token punctuation\">,</span> li</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\r\n      <span class=\"token keyword\">return</span> ul\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Number</h4>\n<p>Number 객체는 JavaScript의 원시 타입 number를 감싸는 객체로, 유의미한 상수값, 숫자를 변환하는 Method 등을 제공한다. NaN은 Not a Number를 나타내는 객체로, <code class=\"language-text\">isNaN()</code>(전역 함수)로 입력 값이 숫자로 변환될 때 <code class=\"language-text\">NaN</code>인지를 검사할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeToUsd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">krw</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1046</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>krw <span class=\"token operator\">/</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> krw <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token function\">changeToUsd</span><span class=\"token punctuation\">(</span>krw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">formatNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">formatNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12.345'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12.35</span></code></pre></div>\n<p><code class=\"language-text\">Number.toFixed()</code>: 숫자의 소수점 자릿수를 제어한다. 다만, 문자열로 반환하는 점에 유의해야 한다.\r\n<code class=\"language-text\">isNaN()</code>을 통해 유저의 입력 값을 포맷팅할 수 있다.</p>\n<h4>Math</h4>\n<p>기본적인 수학 연산 Method를 포함해 상수를 다루는 객체로, BigInt 타입과 호환되지 않고 반드시 Number 타입만을 인자로 다룬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getMaxDiff</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">getMaxDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">getRandomNumberInRange</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getRandomNumberInRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Date</h4>\n<p>특정 시점의 날짜를 표시하기 위한 객체로, 날짜와 관련된 작업을 위한 여러 Method를 포함한다.(연도, 월, 일, 시, 분, 초, 밀리초, 요일 등을 가져올 수 있다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isWeekend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">today</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> day <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> day <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> day <span class=\"token operator\">===</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isWeekend</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021/9/12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">addDays</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> days</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  date<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">addDays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021/9/22\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Dec 31 2021</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">timeDiff</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date1<span class=\"token punctuation\">,</span> date2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> date2<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">let</span> dayTime <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">fromNow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> diff <span class=\"token operator\">=</span> <span class=\"token function\">timeDiff</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">/</span> dayTime<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> days ago...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">fromNow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021/9/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>String</h4>\n<p>JavaScript 문자열 원시 타입에 대한 객체로, 문자열을 조작하기 위한 여러 Method를 포함한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toUserlist</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> users\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li>')</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token function\">toUserlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Daniel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Johnny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token string\">\"Daniel, Kim, SW\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// [ 'Daniel', 'Kim', 'SW']</span>\r\n<span class=\"token string\">\"Daniel, Kim, SW\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"Daniel Kim SW\"</span>\r\n<span class=\"token string\">\"Daniel, Kim, SW\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// true</span>\r\n<span class=\"token string\">\"        Daniel, Kim, SW      \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"Daniel,Kim,SW\"</span>\r\n<span class=\"token string\">\"Daniel, Kim, SW\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">index0f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 7</span></code></pre></div>\n<h4>JSON</h4>\n<p>JSON 객체와 관련된 Method를 포함한 객체를 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Daniel\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span> <span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// '{\"name\":\"Daniel\",\"age\":12}'</span>\r\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"name\":\"Daniel\",\"age\":12}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// { name: 'Daniel', age: 12 }</span></code></pre></div>","frontmatter":{"title":"[Elice SW 2기] mini-log #015 : JavaScript 심화 - 변수와 Hoisting","date":"April 22, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, 이고잉, HTML, CSS, JavaScript, OOP, Event, ES6, var, let, const, hoisting, Lexical Environment, 내장 객체"}},"previous":{"fields":{"slug":"/2022-04-21/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #014 : JavaScript 심화 - Call Stack과 Execution Context, Closure"}},"next":{"fields":{"slug":"/2022-04-25/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #016 : JavaScript 심화 - JSON server와 REST API"}}},"pageContext":{"id":"ac159bc0-e38c-5551-9344-971545baf744","previousPostId":"9409b27b-985c-562d-980c-e735e959036e","nextPostId":"4f8604b0-4eae-552d-b555-2850118efa5e"}},
    "staticQueryHashes": ["2841359383","3257411868"]}