{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-04-15/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"7c8680f8-cf77-5d5d-ab1b-28c4f33dbcbc","excerpt":"Project - 자기 소개 페이지 구현하기 이번 Elice SW 엔지니어 트랙…","html":"<h2>Project - 자기 소개 페이지 구현하기</h2>\n<p>이번 Elice SW 엔지니어 트랙 2기에서 처음으로 진행하는 페이지 구현 과제이다. 사실상 하나의 포트폴리오 페이지라고 생각하고 구상을 시작했다. 추가적으로 강의에서 배운 내용에 기반해 기능을 추가하기로 생각했다.</p>\n<p>우선, 첫 번째로 필요한 내용을 어떤 방식으로 써내려갈지를 결정했다. <code class=\"language-text\">HOME</code>, <code class=\"language-text\">ABOUT</code>, <code class=\"language-text\">DREAM</code>, <code class=\"language-text\">SKILL</code>, <code class=\"language-text\">WORDS</code>으로 총 5개로 메뉴를 구성하고, 하나의 페이지로 구현하는 만큼 각각의 내용을 미리 생각했다.</p>\n<p>두 번째로, HTML 문서의 구조를 잡아 어떤 태그를 어디에 쓰고, 나중에 CSS와 JavaScript에서 활용할 수 있게 <code class=\"language-text\">id</code>, <code class=\"language-text\">class</code>를 부여했다.</p>\n<p>다음에는 생각한대로 CSS를 통해 스타일링을 해준 후, 필요한 부분에 JavaScript를 통해 동적 웹 페이지를 구현하고자 여러 함수를 추가해 네비게이션 바, 탭 버튼, 텍스트 타이핑, 자동 슬라이드, 편지 열기 등의 기능을 구현했다.</p>\n<p>추가적으로 헤더와 푸터를 화면에 고정시키고, 다크 모드 기능과 Top 버튼 기능을 구현했다. 또한 favicon도 추가했다.</p>\n<p>마지막으로 반응형 웹 사이트를 만들기 위해 미디어 쿼리를 활용해 추가적인 CSS 스타일링을 진행했다.</p>\n<blockquote>\n<p>프론트엔드 개발자를 꿈꾸는 이형민의 자기소개 보러 가기 (<a href=\"http://hm.kdt-gitlab.elice.io/introduction/\"><strong>클릭</strong></a>)</p>\n</blockquote>","frontmatter":{"title":"[Elice SW 2기] mini-log #010 : Project - 자기 소개 페이지 구현 by HTML, CSS, JavaScript","date":"April 15, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, 이고잉, HTML, CSS, JavaScript, CodingTest, DOM, event"}},"previous":{"fields":{"slug":"/2022-04-14/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #009 : DOM과 이벤트의 이해"}},"next":null},"pageContext":{"id":"7c8680f8-cf77-5d5d-ab1b-28c4f33dbcbc","previousPostId":"b8b43083-a94e-53b8-b0e9-a3bce5d66281","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}