{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-04-29/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"109fc9fb-5fd7-516a-bbd9-899d34f5b6dc","excerpt":"Intro…","html":"<h2>Intro</h2>\n<p>알파벳을 하나씩 선택해 주어진 기회 안에 단어를 맞추는 게임.</p>\n<p>게임 시작 버튼을 누르면, 단어의 길이와 공백만 보여주고 타이머가 시작되고, 하단부에 구현한 키보드 레이아웃의 알파벳을 클릭하게끔 되어 있다.</p>\n<p>이때 클릭한 알파벳이 단어에 들어 있는 경우, 그 알파벳의 위치가 드러나고, 아닌 경우 좌측부에 행맨이 단계별로 나타난다.</p>\n<p>총 7번의 기회가 있고, 틀릴 때마다 기회가 줄어들며, 타이머로 설정된 60초가 지나면 패배 메시지가 뜬다.</p>\n<p>단어를 7번의 기회와 60초 이내에 맞춘 경우, 승리 메시지가 뜬다.</p>\n<h2>State</h2>\n<p>남은 시간, 기회, 선택한 알파벳, 게임의 진행 상태 등의 데이터를 저장하고, 그 정보를 기준으로 필요한 UI를 화면에 그려야 한다. 이러한 상태를 State 객체로 관리할 수 있다.</p>\n<p>상태를 관리하는 객체는 불변 객체이며, 상태가 변경될 때 새로운 객체가 되는 것이다. 상태를 변경하고자 할 때에 특정 메서드를 호출하도록 해야 한다.</p>\n<h2>Component</h2>\n<p>컴포넌트는 특정 UI 영역을 담당하며, 화면을 구성하게 된다.</p>\n<p>컴포넌트는 상태를 직접 변경해서는 안 되고, 상태를 받아 사용만 하고, 변경의 필요성이 있는 경우 상태 변경을 요청해야 한다. 상태를 직접적으로 변경하는 것은 상태를 관리하는 코드에서 해야 한다.</p>\n<h2>Axios API</h2>\n<h3>Axios란?</h3>\n<p>Axios는 웹 브라우저와 Node.js를 위한 HTTP 비동기(작성된 순서대로 실행되지 않는 처리) 통신 라이브러리입니다. 쉽게 말해서 백엔드와 프론트엔드 간 통신을 쉽게 하기 위해 사용되는 것으로 Ajax처럼 사용되는 것입니다. 비동기 통신 라이브러리를 사용하지 않으면 모든 코드가 순차적으로 처리되어야 하므로 코드의 순서를 신경 써서 작성해야 합니다. 즉, 코드 작성이 매우 복잡해집니다. 따라서 비동기 통신을 쉽게 해주는 Axios나 Ajax 같은 것이 자주 사용되는 것입니다.</p>\n<p>Ajax란 비동기 자바스크립트란 의미로 Asynchronous JavaScript and XML의 약자입니다. Ajax는 브라우저가 가지고 있는 XMLHttpRequest 객체를 이용하여 화면 전체를 새로 고침 하지 않고 변경된 일부 데이터만 로드하는 비동기 처리가 가능합니다. Axios는 Ajax와 유사하며 API를 이용한 통신을 할 때 주로 사용합니다.</p>\n<p>Axios는 Promise를 기반으로 만들어진 라이브러리입니다. Promise는 자바스크립트 ES6에서 비동기 처리를 위해 주로 사용되는 객체입니다.</p>\n<h3>Fetch vs Axios</h3>\n<p>Fetch와 Axios 둘 다 HTTP 요청을 처리하기 위한 자바스크립트의 라이브러리이지만 몇 가지 차이점이 존재합니다.</p>\n<p>Fetch의 경우 자바스크립트에 내장되어 있기 때문에 별도의 import나 설치가 필요하지 않습니다. 하지만 Axios의 경우 간단하지만, 위의 사용법 설명처럼 설치 과정이 필요합니다.</p>\n<p>Fetch는 일부 예전의 인터넷 익스플로러 버전에서 지원하지 않는 경우가 있어, Axios가 Fetch보다 브라우저 호환성이 뛰어납니다.</p>\n<p>Fetch에서는 지원하지 않는 JSON 자동 변환, 응답 시간 초과 설정 기능 등을 Axios에서 지원해줍니다.</p>\n<p>그렇다면 역시 더 좋아 보이는 Axios를 무조건 사용해야 할까요? 그렇지는 않습니다. axios는 외부 모듈로 따로 패키지 설치를 해줘야 사용할 수 있으니, 여의치 않다면 fetch를 사용해도 상관 없습니다.</p>\n<p>자신의 개발 상황(지원하는 브라우저, 기타 다른 패키지 등등)에 맞는 라이브러리를 선택하는 것이 필요합니다.</p>\n<p>학습하는 모든 기술 스택을 무조건 사용해야 하는 것은 결코 아닙니다. 배운 것을 어떤 상황에 활용해야 하는지를 염두에 두면서 학습하면 개발을 할 때 기술 스택을 선택하기에 용이합니다.</p>\n<h2>API</h2>\n<p>API는 Application Programming Interface의 줄임말로 다양한 응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 말합니다.</p>\n<p>만약 여러분이 밥을 먹기 위해 식당을 갔다고 해봅시다. 손님인 여러분은 요리사에게 음식 주문을 해야 밥을 먹을 수 있습니다. 하지만 직접 요리사에게 말하지는 않죠. 일반적인 경우 점원을 통해 주문을 할 텐데요. 이때 점원 역할이 바로 API라고 생각하시면 됩니다. 즉, 프로그램과 프로그램을 연결해 주는 다리 역할을 하는 것이 API입니다.</p>\n<h2>HTTP</h2>\n<p>오늘날, 여러분 모두 대부분의 정보를 인터넷으로 확인합니다. 모든 웹 브라우저에 있는 정보에 접근할 때는 URL을 통하여 접근합니다. 반대로 생각하면 URL을 모르는 정보에는 접근을 할 수 없다라는 것입니다.</p>\n<p>위 설명이 현재 우리가 사용하는 WWW(World Wide Web) 의 기본적인 틀 입니다.</p>\n<p>엘리스 홈페이지를 예시로 설명드리겠습니다.\r\n<a href=\"https://elice.io\">https://elice.io</a> → 이 URL은 엘리스의 URL입니다. URL에서 elice는 엘리스라는 곳임을 인지하지만, 그 앞에 붙은 https(http+s)는 무엇을 뜻할까요? 그리고, URL을 입력한 후 나타나는 웹페이지에 있는 모든 정보들은 다 어디서 온 것일까요?</p>\n<p>누군가는 어떤 정보를 생성하거나 가공했을 것이고, 누군가는 그 정보를 보고 싶을 겁니다.\r\n예를 들어 나 자신이 URL을 통해 누군가에게 해당 정보를 요청하면, 요청한 정보를 누군가가 나에게 다시 전달해줍니다.</p>\n<p>이러한 규칙을 HTTP라고 부릅니다.</p>\n<p>HTTP는 Hypertext Transfer Protocol의 약자입니다.</p>\n<ul>\n<li>Hypertext: 컴퓨터 화면이나 전자 기기에서 볼 수 있는 데이터이며, 다른 데이터와 연결될 수 있는 주소를 참조하고 있습니다.</li>\n<li>Transfer: 사람들이 브라우저를 통해 확인하는 웹 상의 데이터는 HTTP에 의해 전달됩니다.</li>\n<li>Protocol: 규칙 혹은 규약을 뜻합니다.</li>\n</ul>\n<p>이런 HTTP 규칙을 누가 이용하고 사용할까요? 인터넷을 통해 뉴스를 확인하고, 쇼핑을 하는 우리는 직접 HTTP에 따라 행동하진 않습니다! 사용자인 우리는 URL만 알면 됩니다. 평소 우리를 생각해볼까요? 브라우저 주소창에 URL을 입력하면 그 데이터를 요청하고 보여주는 것은 브라우저의 역할입니다. 그리고 요청 받은 데이터를 가져오는 것은 웹 서버의 역할이며 HTTP는 바로 그 클라이언트와 서버 간의 규칙입니다. 이때, 클라이언트의 요청을 HTTP Request, 서버의 응답을 HTTP Response라고 합니다.</p>\n<h3>HTTP Methods</h3>\n<p>HTTP 통신을 위해 아래와 같은 Methods를 제공합니다.</p>\n<ul>\n<li>GET 암호화되지 않은 형태의 데이터를 서버로 전송하는데 사용되는 가장 일반적인 방법</li>\n<li>HEAD GET과 유사한 방법으로 Response Body를 포함하지 않고 사용</li>\n<li>POST 특정 양식의 데이터를 암호화하여 서버로 전송하는데 사용</li>\n<li>PUT 특정 대상의 데이터를 갱신(Update)하는데 사용</li>\n<li>DELETE URL에 지정된 대상을 삭제(DELETE)하는 데 사용</li>\n</ul>\n<h3>HTTP status code</h3>\n<p>HTTP status code(응답 상태 코드)는 특정 HTTP 요청이 성공적으로 완료되었는지 알려주는 코드이다. 총 응답은 5개의 그룹으로 나누어진다. (상태 코드는 section 10 of RFC 2616에 정의되어 있다.)</p>\n<ul>\n<li>응답: 100</li>\n<li>성공적인 응답: 200</li>\n<li>리다이렉트: 300</li>\n<li>클라이언트 에러: 400</li>\n<li>서버 에러: 500</li>\n</ul>\n<h3>Axios와 CRUD</h3>\n<p><code class=\"language-text\">index.html</code>에 아래 두 스크립트를 추가해주면 axios 라이브러리를 손쉽게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CRUD가 Create, Read, Update, Delete의 제일 앞 문자를 하나씩 따와 만든 줄임말로 각각은 아래처럼 매칭이 됩니다.</p>\n<ul>\n<li>\n<p>C : Create(생성) - POST</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data 객체<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>R : Read(조회) - GET</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>U : Update(수정) - PUT</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data 객체<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>D : Delete(삭제) - DELETE</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[Elice SW 2기] mini-log #020 : JavaScript HANG MAN Game 제작","date":"April 29, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, 이고잉, HTML, CSS, JavaScript, OOP, Event, ES6, async, await, fetch API, REST API"}},"previous":{"fields":{"slug":"/2022-04-28/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #019 : JavaScript 심화 - 비동기 async, await, REST API, fetch API"}},"next":{"fields":{"slug":"/2022-05-02/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #021 : JavaScript 비동기와 Node.js 기초"}}},"pageContext":{"id":"109fc9fb-5fd7-516a-bbd9-899d34f5b6dc","previousPostId":"81672024-59cc-5c5a-bb82-c7c655aeb40d","nextPostId":"2a706d74-7aa8-5dff-8c13-f6fe945afb60"}},
    "staticQueryHashes": ["2841359383","3257411868"]}