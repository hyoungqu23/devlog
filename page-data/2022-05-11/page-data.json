{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-05-11/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"4b4efbe8-0661-5c6c-8853-0f3b2e045c00","excerpt":"Express.js 복습하면서 만들어보기 다음 명령어로 express-generator를 전역적으로 설치할 수 있다. 설치 이후에  옵션을 이용해 명령의 옵션을 확인할 수 있다. 보통 Node.js 템플릿 엔진으로 ,  중 하나를 사용하곤 한다. 보통 ejs는 기존 HTML…","html":"<h2><a href=\"https://expressjs.com/\">Express.js</a> 복습하면서 만들어보기</h2>\n<p>다음 명령어로 <a href=\"https://expressjs.com/ko/starter/generator.html\">express-generator</a>를 전역적으로 설치할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">npm install express-generator -g</code></pre></div>\n<p>설치 이후에 <code class=\"language-text\">-h</code> 옵션을 이용해 명령의 옵션을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">express --view=ejs myfirstapp</code></pre></div>\n<p>보통 Node.js 템플릿 엔진으로 <code class=\"language-text\">ejs</code>, <code class=\"language-text\">pug</code> 중 하나를 사용하곤 한다. 보통 ejs는 기존 HTML과 문법이 흡사하여 사용하기 쉽다는 장점이 있어 선택한다. 다만, pug의 경우 새로운 문법을 배워야 하지만, 간소화되는 코드와 컴파일 후 렌더링되는 방식으로 인해서 높은 생산성을 자랑한다.(<a href=\"https://github.com/mde/ejs\">ejs GitHub</a>, <a href=\"https://jeong-pro.tistory.com/65\">참고</a>, <a href=\"https://pugjs.org/api/getting-started.html\">pug 홈페이지</a>)</p>\n<p><code class=\"language-text\">myfirstapp</code> 프로젝트 디렉토리를 생성하고, 이후 이동한 후 <code class=\"language-text\">npm install</code>을 통해 npm을 설치한다.</p>\n<p>추가적으로 다음 명령어를 활용해 <code class=\"language-text\">nodemon</code> 도구를 설치한다. <code class=\"language-text\">nodemon</code>은 node monitor의 약어로 Node.js가 실행하는 파일이 속한 디렉토리를 감시하고 있다가 파일이 수정되면 자동으로 Node.js 어플리케이션을 재시작하는 확장 모듈이다. <code class=\"language-text\">nodemon</code>을 설치하면 재시작 없이 코드를 자동 반영 할수 있다.(<a href=\"https://velog.io/@dami/node-express-%EC%84%9C%EB%B2%84%EC%99%80-nodemon-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\">참고</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">npm install -g nodemon</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\r\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon ./bin/www\"</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>다음으로 <code class=\"language-text\">npm start</code>로 프로젝트를 시작할 수 있다. <code class=\"language-text\">nodemon</code>으로 인해 코드 수정 시 서버 재시작 없이 자동 반영할 수 있다.</p>\n<p><img src=\"./img/express%20first%20page.png\" alt=\"main page\">\r\n<code class=\"language-text\">http://localhost:3000/</code>에 접속해 main page를 확인할 수 있다. 또한, <code class=\"language-text\">http://localhost:3000/users</code>에 접근해 “respond with a resource” 텍스트를 확인할 수 있다.\r\n<img src=\"img/express%20users%20page.png\" alt=\"users page\"></p>\n<p>이에 더해, 터미널에서 HTTP 메서드, status code, path, 로딩 시간 등을 확인할 수 있다.</p>\n<blockquote>\n<p>GET / 200 15.210 ms - 207\r\nGET /users 200 1.368 ms - 23</p>\n</blockquote>\n<hr>\n<h3>Express 구조 파악하기</h3>\n<p><code class=\"language-text\">app.js</code>는 최상단 디렉토리에 저장된 실행부로, 주로 <a href=\"http://expressjs.com/ko/4x/api.html#app\"><code class=\"language-text\">app</code> 객체의 메서드</a>로 이루어져 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app.js</span>\r\n\r\n<span class=\"token comment\">// Creates an Express application. The express() function is a top-level function exported by the express module.</span>\r\n<span class=\"token comment\">// Express 응용 프로그램을 만든다. express() 함수는 express 모듈에서 내보내는 최상위 함수이다.</span>\r\n<span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// The app object conventionally denotes the Express application. Create it by calling the top-level express() function exported by the Express module.</span>\r\n<span class=\"token comment\">// 앱 객체는 전통적으로 익스프레스 애플리케이션을 나타낸다. Express 모듈에서 내보낸 최상위 express() 함수를 호출하여 생성할 수 있다.</span>\r\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// 템플릿 엔진이 ejs engine으로 설치되었음을 확인할 수 있다.</span>\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"views\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"views\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>대략적으로 흐름을 확인해보면, express Module을 불러와 <code class=\"language-text\">app</code> 객체를 생성한 후 기타 다른 Module을 불러오고, ejs engine을 세팅하는 등의 동작이 진행된다.</p>\n<h3>Express Router와 미들웨어 확인하기</h3>\n<p>가장 중요한 것은 <code class=\"language-text\">routes</code> 디렉토리에 존재하는 <code class=\"language-text\">index.js</code>, <code class=\"language-text\">users.js</code> 라우터를 불러와 <code class=\"language-text\">app.use(path, router)</code>로 설정한다는 점이다. 즉, 해당 경로에 진입하는 경우 HTTP 요청과 응답을 해당 라우터로 진행하겠다고 설정하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app.js</span>\r\n\r\n<span class=\"token comment\">// Router 불러오기</span>\r\n<span class=\"token keyword\">var</span> indexRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/index\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">var</span> usersRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/users\"</span><span class=\"token punctuation\">)</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> indexRouter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '/' 현재 페이지를 의미함(여기서는 http://localhost:3000)</span>\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 따라서 여기 path는 http://localhost:3000/users가 된다.</span></code></pre></div>\n<p><code class=\"language-text\">index.js</code>의 라우터를 먼저 확인해보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/index.js</span>\r\n\r\n<span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// express 객체의 새로운 라우터를 생성하는 메서드 Router()를 활용해 라우터 인스턴스를 생성하기</span>\r\n\r\n<span class=\"token comment\">/* GET home page. */</span>\r\n<span class=\"token comment\">// router.get(), router.post() 메서드는 Express에서 라우팅 기능을 제공한다.</span>\r\n<span class=\"token comment\">// 이는 사실상 미들웨어</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Express\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\">// 응답 객체의 render 메서드를 활용해 views 디렉토리의 index.ejs 템플릿을 화면에 출력한다.</span>\r\n  <span class=\"token comment\">// 이때 title 변수에 \"Express\" 값을 할당해 전달했음을 알 수 있다.</span>\r\n  <span class=\"token comment\">// ejs 문법 상 &lt;%= title %>으로 해당 변수 값을 사용할 수 있다.</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// HTTP 메서드로 `get`</span>\r\n<span class=\"token comment\">// '/'는 메인 페이지인 http://localhost:3000</span>\r\n<span class=\"token comment\">// 콜백 함수는</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router <span class=\"token comment\">// 라우터 내보내기</span></code></pre></div>\n<p>라우팅은 클라이언트 요청에 대해 어플리케이션의 앤드포인트(URIs)가 응답하는 방식을 말하는데, express에서는 HTTP 메서드에 해당하는 express 라우터 메서드를 사용해 라우팅을 정의한다.(<a href=\"https://velog.io/@hanblueblue/Node.js-3.-express\">참고</a>)</p>\n<blockquote>\n<p>router.get(‘지정된 경로(URI) 값’, 콜백 함수);</p>\n</blockquote>\n<p>같은 방식으로, <code class=\"language-text\">users.js</code>도 라우터를 정의하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/users.js</span>\r\n\r\n<span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 라우터 생성하기</span>\r\n\r\n<span class=\"token comment\">/* GET users listing. */</span>\r\n<span class=\"token comment\">// 다만 이때의 경로는 http://localhost:3000/users 이다.</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"respond with a resource\"</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\">// 응답 객체의 send 메서드로 HTTP 응답을 보낼 수 있다. 이때 매개 변수는 버퍼 객체, 문자열, 객체, Boolean 또는 배열일 수 있다.</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router <span class=\"token comment\">// 라우터 내보내기</span></code></pre></div>\n<p>이렇게 정의된 라우터는 <code class=\"language-text\">app.js</code>에서 불러와 활용되는 것을 이미 확인했다.</p>\n<h3>Express 미들웨어 만들어보기</h3>\n<p>그럼 이제 새로운 미들웨어를 만들어보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/hello.js</span>\r\n\r\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// http://localhost:3000/hello</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test hello router.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 터미널 출력</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Express!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 화면 출력</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>이렇게 정의한 라우터를 <code class=\"language-text\">app.js</code>에서 불러와 <code class=\"language-text\">use</code> 메서드를 활용해 마운트해주면 된다. 즉, 지정된 경로에서 해당 라우터가 실행되게끔 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app.js</span>\r\n\r\n<span class=\"token keyword\">var</span> helloRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/hello\"</span><span class=\"token punctuation\">)</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">,</span> helloRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>Test hello router.\r\nGET /hello 200 6.367 ms - 14</p>\n</blockquote>\n<p><img src=\"img/express%20hello%20page.png\" alt=\"hello page\"></p>\n<hr>\n<p>웹의 핵심은 요청(request)에 의해 응답(response)하는 것인데, 이를 <a href=\"http://expressjs.com/ko/guide/writing-middleware.html#mw-fig\">미들웨어</a>가 담당하고 있다. 미들웨어는 Express.js 동작의 핵심으로, HTTP 요청(request)과 응답(response) 사이에서 단계별 동작을 수행해주는 함수이다. 미들웨어는 HTTP 요청이 들어온 시점부터 시작되며, <strong>HTTP <a href=\"https://expressjs.com/ko/4x/api.html#req\">요청</a>과 <a href=\"https://expressjs.com/ko/4x/api.html#res\">응답</a> 객체를 처리</strong>하거나, <strong>다음 미들웨어를 실행</strong>하는데, HTTP 응답이 마무리될 때까지 미들웨어의 동작 사이클이 실행된다.</p>\n<p>즉, 미들웨어 함수는 요청 객체(<code class=\"language-text\">req</code>), 응답 객체(<code class=\"language-text\">res</code>), 그리고 그 다음의 미들웨어 함수(<code class=\"language-text\">next</code>) 대한 액세스 권한을 갖는 함수이다.</p>\n<p><code class=\"language-text\">next()</code> 함수를 호출해 어플리케이션 내의 그 다음 미들웨어 함수가 호출되게 된다. 이때 현재의 미들웨어 함수가 <strong>요청-응답 주기를 종료하지 않는 경우</strong>에는 <code class=\"language-text\">next()</code>를 호출해 그 다음 미들웨어 함수를 호출해야 한다. 그렇지 않으면 해당 요청이 정지된 채로 방치되기 때문이다.</p>\n<p><img src=\"img/middleware.png\" alt=\"미들웨어\"></p>\n<hr>\n<h3>Express 미들웨어 <code class=\"language-text\">next()</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// http://localhost:3000/list</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test list router.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 터미널 출력</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This page shows list.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 화면 출력</span>\r\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현재 미들웨어의 기능을 마치고, 다음 미들웨어로 연결해주는 역할을 담당.</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test item router.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\r\n  <span class=\"token comment\">// res.render('list', {title: \"LIST\", item: \"list-items\"})</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<blockquote>\n<p>Test list router.\r\nTest item router.\r\nGET /list 304 5.909 ms - -</p>\n</blockquote>\n<p><code class=\"language-text\">next()</code>를 통해 미들웨어를 연결할 수 있다. 다만, 하나의 미들웨어에 모든 동작을 모두 작성할 수 있는데, 나누어 작성하는 이유는 무엇일까?</p>\n<p>우리는 미들웨어가 끊기지 않고 다음 동작을 원활하게 진행할 수 있기 위해 <code class=\"language-text\">next()</code>를 활용한다. <code class=\"language-text\">next()</code>는 콜백을 끊어주는 느낌으로, 더 간결하고 동기적으로 작성하기 위해 쓴다. 예를들어 소모임, 문토, 소셜링 신청 시 신청은 끝나지만, 그 다음 동작이 중요하다. 따라서, 미들웨어를 활용해 끊기지 않고 계속 동작을 할 수 있게 해주어야 한다.</p>\n<p>이때 다음 미들웨어에서 <code class=\"language-text\">res.method()</code>를 다시 사용하면, 에러가 발생한다.</p>\n<blockquote>\n<p>Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client.</p>\n</blockquote>\n<p>웹에서의 통신 방식은 <strong>1요청 1응답</strong>이 우선이다. 하나의 요청에 다수의 응답을 받을 수 없다. 1요청 1응답 이후에는 통신이 종료되는 것이 정상이다.</p>\n<p>따라서, 이전 미들웨어에서 1응답을 한 경우, 다음 미들웨어에서 응답을 또 하면 에러가 발생한다. 따라서 주소가 동일한 미들웨어를 설정해서 응답을 해야한다.</p>\n<hr>\n<h3>Express Post</h3>\n<p>HTML 템플릿 구현을 할 수 있다. SSR에서 화면을 미리 만드는 작업이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- views/post.ejs --></span>\r\n\r\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/expost<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phoneNumber<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bDay<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>전송하기<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이후 해당 템플릿을 활용하는 라우터를 생성하고 미들웨어를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// routes/post.js</span>\r\n\r\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// req.body: form의 name input의 값을 전달 받음</span>\r\n  <span class=\"token keyword\">const</span> phoneNumber <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>phoneNumber <span class=\"token comment\">// req.body: form의 phoneNumber input의 값을 전달 받음</span>\r\n  <span class=\"token keyword\">const</span> bDay <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>bDay <span class=\"token comment\">// req.body: form의 bDay input의 값을 전달 받음</span>\r\n\r\n  <span class=\"token comment\">// JSON 형식으로 응답 받기</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">phoneNumber</span><span class=\"token operator\">:</span> phoneNumber<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">bDay</span><span class=\"token operator\">:</span> bDay<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>라우터 구현이 완료되면, <code class=\"language-text\">app.js</code>에서 해당 라우터를 불러와 설정하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// app.js</span>\r\n\r\n<span class=\"token keyword\">const</span> postRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/post\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 라우터 불러오기</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/expost\"</span><span class=\"token punctuation\">,</span> postRouter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 라우터 설정하기(경로, 사용할 라우터)</span></code></pre></div>\n<blockquote>\n<p>GET /expost 200 12.319 ms - 540</p>\n</blockquote>\n<p>페이지에 접속이 잘 되며, JSON 형태의 값이 전송되는 것을 확인할 수 있다.</p>\n<p>또한 <a href=\"https://expressjs.com/ko/api.html#res.redirect\"><code class=\"language-text\">res.redirect</code></a> 메서드를 활용해 전송이 완료된 후 호출한 경로로 재접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 다음 미들웨어</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// redirect: 호출한 경로로 재접근</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/expost\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>MongoDB</h2>\n<p>mongoDb: 윈도우 환경에서 환경 변수 추가 필요(<a href=\"https://khj93.tistory.com/entry/MongoDB-Window%EC%97%90-MongoDB-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\">참고</a>)</p>\n<p>No SQL 형식의 데이터베이스(Not only SQL)</p>\n<p>RDBMS(관계형 데이터베이스) -> 엄격한 구조.. 기본키로 검색이 빠름..\r\nNo SQL(무관계형 데이터베이스) -> 대용량 처리에 압도적으로 유리함 / 속도도 빠르다</p>\n<p>1일 20만건 이상의 처리를 하지 않는다면 RDBMS 만으로도 충분히 서비스가 가능하다.</p>\n<p>빅데이터에서 파생된 AI가 발달하면서 No SQL이 각광받았다. 관계가 없이 유연하게 설계할 수 있고, JSON에 더 친화적이다.</p>\n<p>하나의 필드가 빠지면 RDBMS에서는 바로 에러처리를 한다.</p>\n<p>구글 애널리틱스 firebase : No SQL\r\n—> 그로스 해킹( 앱, 웹 사용자들의 데이터 분석 -> 활용)\r\n—> 뭐 필드 하나 빠지면 그 필드가 빠진 유저들의 패턴을 분석 가능</p>\n<p>치명적인 단점: 어디에 있는지 모름..</p>\n<p>Database > Collection > Document</p>\n<p><a href=\"https://mongoosejs.com/\">Mongoose</a> <a href=\"https://mongoosejs.com/docs/api/query.html\">참고</a>\r\nODM</p>\n<p>설치하기\r\n<code class=\"language-text\">npm i mongoose</code></p>\n<p>cmd</p>\n<div class=\"gatsby-highlight\" data-language=\"cmd\"><pre class=\"language-cmd\"><code class=\"language-cmd\">mongo\r\n\r\nuse bookstore\r\n\r\ndb.createUser({\r\n  user: &#39;testid&#39;,\r\n  pwd: &#39;test12345&#39;,\r\n  roles: [\r\n    &#39;readWrite&#39;\r\n  ]\r\n})\r\n\r\nshow users</code></pre></div>\n<p>참고: express gitignore 검색해보기</p>\n<p>dbconfig.json</p>\n<p>models 디렉토리 index.js\r\n-> 데이터베이스 접근 기본 구조 작성</p>\n<p>app.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dbconnect <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./models/index\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// DB 불러오기</span>\r\n<span class=\"token function\">dbconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수형이기 때문에 실행해주어야 한다.</span></code></pre></div>\n<p><code class=\"language-text\">nodemon start</code> 로컬 서버 실행</p>\n<p>data type(<a href=\"https://mongoosejs.com/docs/schematypes.html\">참고</a>)</p>\n<p>models 디렉토리 book.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 몽구스 불러오기</span>\r\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema <span class=\"token comment\">// 값들의 모음</span>\r\n\r\n<span class=\"token comment\">// 데이터 생성</span>\r\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">bookname</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">publish</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// 데이터를 collection에 삽입</span>\r\n<span class=\"token keyword\">const</span> bookData <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// collection name, data</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> bookData</code></pre></div>\n<p>post.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> BookSchema <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../models/book\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 불러오기</span>\r\n\r\n<span class=\"token comment\">// book.js 관련</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/addbook\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> publish <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\r\n\r\n  <span class=\"token comment\">// 데이터 할당하기</span>\r\n  <span class=\"token keyword\">let</span> bookData <span class=\"token operator\">=</span> <span class=\"token function\">BookSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> author<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> price<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">publish</span><span class=\"token operator\">:</span> publish<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token comment\">// 데이터 저장하기</span>\r\n  bookData<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token comment\">// 다시 폼으로 가기</span>\r\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/expost\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>post.ejs</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token comment\">&lt;!-- method를 post로 설정해야 한다. --></span>\r\n    <span class=\"token comment\">&lt;!-- /expost 화면에 출력한다. --></span>\r\n    <span class=\"token comment\">&lt;!-- &lt;form action=\"/expost\" method=\"post\">\r\n    &lt;input type=\"text\" name=\"name\" id=\"\">\r\n    &lt;input type=\"number\" name=\"phoneNumber\" id=\"\">\r\n    &lt;input type=\"date\" name=\"bDay\" id=\"\">\r\n    &lt;input type=\"submit\" value=\"전송하기\">\r\n  &lt;/form> --></span>\r\n\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/expost/addbook<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>price<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>publish<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>전송하기<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>POST /expost/addbook 302 17.657 ms - 58\r\nGET /expost 304 2.178 ms - -\r\nPOST /expost/addbook 302 2.110 ms - 58\r\nGET /expost 304 1.239 ms - -</p>\n<p>저장된 데이터</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"$oid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"627b43f2652a361dbbb5e9b3\"</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"bookname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"이펙티브 타입스크립트\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"철수\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"publish\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"$date\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token property\">\"$numberLong\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1651449600000\"</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>임의로 하나를 빼고 입력해도 데이터는 저장이 된다. 아래 예시는 price 값을 배제하고 저장한 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"$oid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"627b484b652a361dbbb5e9b5\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"bookname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"자바스크립트 이해\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"영희\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"publish\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"$date\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"$numberLong\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1651536000000\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본값 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">50000</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>다만 이 경우 input 태그와 post.js의 데이터 할당 부분을 지워주어야 하는 문제가 있다. 그냥 디폴트 설정이 가능하다는 점만 확인하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">sales</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>확인</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">http://localhost:3000/expost 의 주소로 들어가면 post.ejs 창이 render 됨 (res.render(\"post\"); 때문에)\r\n\r\n그 창에서 bookname, auther, price, date 의 데이터 입력 후 submit 버튼 입력\r\n\r\n=> /addbook 쪽으로 데이터가 보내짐 (post.ejs 의 form 태그의 action 속성 : 폼 데이터(form data)를 서버로 보낼 때 해당 데이터가 도착할 URL)\r\n\r\n=> post.js에서, BookSchema(Schema를 정의해놔야 함)를 require 해와서 만들어놓은 변수에 할당하고, .save()를 통해 db에 저장함\r\n\r\n----- 아님\r\n&lt;http://localhost:3000/expost/addbook> 의 주소로 들어가면 post.ejs 창이 render\r\n됨 (res.render(\"post\"); 때문에) 그 창에서 bookname, auther, price, date 의\r\n데이터 입력 후 submit 버튼 입력 => /addbook 쪽으로 데이터가 보내짐 (post.ejs 의\r\nform 태그의 action 속성 : 폼 데이터(form data)를 서버로 보낼 때 해당 데이터가\r\n도착할 URL) => post.js에서, BookSchema(Schema를 정의해놔야 함)를 require 해와서\r\n만들어놓은 변수에 할당하고, .save()를 통해 db에 저장함.</code></pre></div>\n<p>검색해보기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 검색하기</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books/:id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> authorName <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\r\n\r\n  BookSchema<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> authorName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"등록된 작가가 없습니다.\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>find로 하면 전체를 찾는 것이기 때문에 else 부분 안나옴</p>\n<p>하나만 찾는 findOne을 사용하는 것이 맞을 듯</p>\n<p>REST API\r\nput, delete 잘 사용안함(보안이슈)</p>","frontmatter":{"title":"[Elice SW 2기] mini-log #028 : Node.js Express.js와 MongoDB 2","date":"May 11, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, HTML, CSS, JavaScript, OOP, Node.js, modules, npm, express.js, REST API, MongoDB, mongoose"}},"previous":{"fields":{"slug":"/2022-05-10/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #027 : Node.js Express.js와 MongoDB"}},"next":{"fields":{"slug":"/2022-05-12/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #029 : Node.js Express.js와 MongoDB 3"}}},"pageContext":{"id":"4b4efbe8-0661-5c6c-8853-0f3b2e045c00","previousPostId":"48b0a5e8-2950-523a-a79d-cd3d0193ce2d","nextPostId":"cba0db4c-90ab-5db3-9993-9244be6a65bd"}},
    "staticQueryHashes": ["2841359383","3257411868"]}