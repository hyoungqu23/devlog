{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-05-13/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"ca32effb-9507-579f-9a9b-169d75aa4b60","excerpt":"MongoDB 대표적인 No-SQL 데이터베이스이자, Document 데이터베이스로, 대용량 데이터를 처리하기 좋은 데이터베이스이다. No-SQL…","html":"<h2>MongoDB</h2>\n<p>대표적인 No-SQL 데이터베이스이자, Document 데이터베이스로, 대용량 데이터를 처리하기 좋은 데이터베이스이다.</p>\n<p><strong>No-SQL 데이터베이스</strong>는 다음과 같은 특징을 갖는다.</p>\n<ul>\n<li>구조화된 질의어를 사용하지 않는다.</li>\n<li>자료 간의 관계에 초점을 두지 않는다.</li>\n<li>데이터를 구조화하지 않고 유연하게 저장한다.</li>\n</ul>\n<p>이와 다르게 관계형 데이터베이스(RDB, Relational Database)는 자료들의 관계를 주요하게 다루고, SQL 질의어를 사용하기 위해 필수적으로 DDL(Data Definition Language)을 사용하거나 데이터를 구조화해 저장한다. 즉, 스키마에 정의된 데이터가 아니면 저장할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 데이터베이스 생성</span>\r\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> sample_data\r\n\r\n<span class=\"token comment\">-- 테이블 생성 및 구조 작성</span>\r\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> posts <span class=\"token punctuation\">(</span>\r\n  id <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> AUTO INCREMENT\r\n  title <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  content <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">-- 데이터 추가</span>\r\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> posts <span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\r\n<span class=\"token punctuation\">(</span><span class=\"token string\">'first title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'first content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">(</span><span class=\"token string\">'second title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"mongodb\"><pre class=\"language-mongodb\"><code class=\"language-mongodb\">use sample_data\r\n\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 바로 데이터베이스의 collection에 저장 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\r\ndb<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'first title'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'first content'</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'second title'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'second content'</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>따라서 사전에 데이터 구조화 작업이 없이 데이터베이스를 사용할 수 있기 때문에 데이터베이스 작업에 크게 관여치 않고 프로젝트를 빠르게 진행할 수 있다는 점에서 No-SQL 데이터베이스가 많이 사용된다.</p>\n<p>이러한 No-SQL 데이터베이스에는 대표적으로 자료를 Document로 저장하는 Document 데이터베이스가 일반적이지만, 이외에도 key-value, Graph, large collection 등의 No-SQL 데이터베이스가 존재한다.</p>\n<h3>MongoDB의 기본 구조</h3>\n<ol>\n<li>\n<p><strong>Database</strong></p>\n<p>하나 이상의 Collection을 가질 수 있는 저장소.</p>\n</li>\n<li>\n<p><strong>Collection</strong></p>\n<p>하나 이상의 Document가 저장되는 공간으로, Document의 구조를 정의하지는 않는다.</p>\n</li>\n<li>\n<p><strong>Document</strong></p>\n<p>MongoDB에 저장되는 자료로, 구조의 제약 없이 유연하게 저장할 수 있으며, BSON을 통해 다양한 자료형을 지원한다.</p>\n<p>ObjectID는 각 Document의 유일한 key 값으로 하나씩 증가하는 것이 아니라 Document를 생성할 때 자동으로 난수로 생성되는 값(timestamp + random value + auto increment)이다.</p>\n</li>\n</ol>\n<h2>Mongoose ODM</h2>\n<p>ODM은 Object Data Modeling의 약어로, 데이터를 객체로 모델화하여 관리할 수 있게 해주는 방식이다. Mongoose ODM은 MongoDB의 Collection에 집중해서 관리할 수 있도록 도와주는 패키지로, Collection을 모델화해, 관련 기능들을 쉽게 사용할 수 있도록 도와준다. 즉, Collection을 JavaScript의 모델로 만들어 둔 후 이를 통해 MongoDB의 데이터에 쉽게 접근하고, 수정하고 사용할 수 있도록 도와주는 패키지이다.</p>\n<ul>\n<li>\n<p>연결 관리</p>\n<p>MongoDB는 기본적으로 Node.js와 연결할 수 있는 기본 드라이버를 제공하지만, 이것만으로 데이터베이스와 코드 사이의 연결 상태를 관리하기는 어렵다.</p>\n<p>Mongoose를 활용해 간단하게 데이터베이스와 코드의 연결 상태를 관리할 수 있다.</p>\n</li>\n<li>\n<p>스키마 관리</p>\n<p>No-SQL은 스키마를 정의하지 않는 것이 장점이지만, 데이터 형식을 어느 정도 미리 정의해야 코드를 작성하고, 프로젝트를 관리하는 데 유용하다.</p>\n<p>Mongoose는 MongoDB에서 정의되지 않는 데이터 형식을 코드 레벨에서 스키마를 정의하고 관리할 수 있게 해준다.</p>\n</li>\n<li>\n<p>Populate</p>\n<p>MongoDB는 관계형 데이터베이스의 특징인 Join을 제공하지 않는다. 따라서 이와 유사한 기능을 활용하려면, 복잡한 aggregate 쿼리를 제공하고 있다.</p>\n<p>Mongoose는 Populate를 제공하여, 이를 통해 Join 기능을 간단하게 구현할 수 있다.</p>\n</li>\n</ul>\n<h3>Mongoose ODM 사용 순서</h3>\n<h4>데이터 스키마 정의하기</h4>\n<p>Collection에 저장될 Document의 스키마를 코드 레벨에서 관리할 수 있도록 스키마를 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./models/schemas/board.js</span>\r\n\r\n<span class=\"token comment\">// Mongoose 패키지에서 Schema 클래스 가져오기</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Schema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// PostSchema 객체 생성</span>\r\n<span class=\"token keyword\">const</span> PostSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">timestamps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> PostSchema</code></pre></div>\n<p>데이터 스키마를 정의할 때 다양한형식을 미리 지정해 데이터의 생성, 수정 작업 시 데이터 형식을 체크해주는 기능을 제공하며, 추가로 <code class=\"language-text\">timestamps</code> 옵션을 활용하면 생성, 수정 시간을 자동적으로 기록해준다.</p>\n<h4>정의된 스키마를 사용해 모델 만들기</h4>\n<p>작성된 스키마를 Mongoose에서 사용할 수 있는 모델로 만들어야 한다. 이때 모델의 이름을 지정하여, Populate 등에서 해당 이름으로 모델을 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./model/index.js</span>\r\n\r\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Mongoose 패키지 불러오기</span>\r\n<span class=\"token keyword\">const</span> PostSchema <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./schemas/board\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 작성한 스키마 불러오기</span>\r\n\r\n<span class=\"token comment\">// 작성한 스키마(PostSchema)를 \"Post\" 이름을 가진 모델로 만들고, 이를 Post 이름으로 내보내기</span>\r\nexports<span class=\"token punctuation\">.</span>Post <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Post\"</span><span class=\"token punctuation\">,</span> PostSchema<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>데이터베이스 연결하기</h4>\n<p><code class=\"language-text\">connect</code> 함수를 활용해 간단히 데이터베이스에 연결할 수 있다. Mongoose는 자동으로 연결을 관리해주기 때문에 직접 연결 상태를 체크하지 않아도 모델 사용 시 연결 상태를 확인해 사용이 가능할 때 비동기적으로 작업을 실행해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\r\n\r\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Post <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./models\"</span><span class=\"token punctuation\">)</span>\r\n\r\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongodb://localhost:27017/myapp\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// 이후 Post를 바로 활용할 수 있다. 연결되지 않아도 에러가 발생하지 않고 연결될 때까지 기다렸다가 Post가 실행이 된다.</span></code></pre></div>\n<h4>모델을 통해 데이터 사용하기</h4>\n<p>작성된 모델을 이용해 CRUD를 수행할 수 있다. Mongoose는 CRUD를 수행하기 위한 다양한 함수를 제공하고 있다.</p>\n<ul>\n<li>CREATE: <code class=\"language-text\">create</code></li>\n<li>READ: <code class=\"language-text\">find</code>, <code class=\"language-text\">findById</code>, <code class=\"language-text\">findOne</code></li>\n<li>UPDATE: <code class=\"language-text\">updateOne</code>, <code class=\"language-text\">updateMany</code>, <code class=\"language-text\">findByIdAndUpdate</code>, <code class=\"language-text\">findOneAndUpdate</code></li>\n<li>DELETE: <code class=\"language-text\">deleteOne</code>, <code class=\"language-text\">deleteMany</code>, <code class=\"language-text\">findByIdAndDelete</code>, <code class=\"language-text\">findOneAndDelete</code></li>\n</ul>\n<h5>CREATE</h5>\n<p><code class=\"language-text\">create</code> 함수를 사용해 Document를 생성할 수 있다. 인자로 Document Object나 Document Object Array를 전달하는데, 각각 단일 Document, 복수 Document를 생성할 수 있다. <code class=\"language-text\">create</code> 함수는 생성된 Document를 반환하므로, 이를 받아 다음 코드에 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Post <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./models\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> created <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"first title\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"first content\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> multipleCreated <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\r\n    item1<span class=\"token punctuation\">,</span>\r\n    item2<span class=\"token punctuation\">,</span>\r\n    item3<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>READ</h5>\n<p><code class=\"language-text\">find</code> 관련 함수를 사용해 Document를 검색할 수 있다. query를 사용해 검색하거나 <code class=\"language-text\">findById</code> 함수를 사용하면 ObjectID 값으로 Document를 검색할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Post <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./models\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> listPost <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> onePost <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> postById <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://docs.mongodb.com/manual/reference/operator/query/\">Query</a>\r\nMongoDB에서도 SQL의 where 문과 유사한 조건절 기능을 사용할 수 있다.\r\nMongoDB의 Query는 JSON과 유사한 형태를 가진 BSON 형식으로, 기본 문법 그대로 mongoose에서도 사용할 수 있다.\r\n{key: value}로 전달되는 exact match를 사용할 수 있고, <code class=\"language-text\">$lt</code>, <code class=\"language-text\">$gt</code>, <code class=\"language-text\">$lte</code>, <code class=\"language-text\">$gte</code>를 사용해 range query를 작성할 수 있다. 또한 <code class=\"language-text\">$in</code>으로 다중 값을 검색하고, <code class=\"language-text\">$or</code>로 다중 조건 검색을 할 수 있다.\r\nMongoose에서는 Query 값으로 배열이 주어지면, 자동으로 <code class=\"language-text\">$in</code> Query를 생성해준다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"elice\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token comment\">// and</span>\r\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">$lt</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">$gte</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token comment\">// and</span>\r\n  <span class=\"token literal-property property\">languages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    $<span class=\"token keyword\">in</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 둘 중 하나</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token comment\">// or</span>\r\n  <span class=\"token literal-property property\">$or</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ACTIVE\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isFresh</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 둘 중 하나</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5>UPDATE</h5>\n<p><code class=\"language-text\">update</code> 관련 함수를 사용해 Document를 수정할 수 있다. <code class=\"language-text\">find~</code> 접두사를 가진 함수들은 검색된 Document를 업데이트하여 반환해주고, <code class=\"language-text\">update~</code> 함수들은 쿼리의 결과 정보를 반환한다.</p>\n<p>Mongoose의 update는 기본적으로 $set Operator를 사용하여, Document를 통째로 변경하지 않는다.(존재하는 속성이면 수정, 존재하지 않는 속성이면 추가)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Post <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./models\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> updateResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">updateOne</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> updateResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">updateMany</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> postById <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> onePost <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">findOneAndUpdate</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>DELETE</h5>\n<p>delete 관련 함수를 사용해 Document를 삭제할 수 있다. <code class=\"language-text\">find~</code> 접두사를 가진 함수들은 검색된 Document를 반환해주고, <code class=\"language-text\">delete~</code> 함수는 삭제 결과를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Post <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./models\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> deleteResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">deleteOne</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> deleteResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> postById <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndDelete</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> onePost <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">findOneAndDelete</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Populate</h5>\n<p>Mongoose는 Populate를 제공하여, 이를 통해 Join 기능을 간단하게 구현할 수 있다.</p>\n<p>Document 내부에 Document를 담지 않고, ObjectID를 가지고 reference할 수 있는 방법을 제공한다. Document에는 reference되는 ObjectID를 담고, 이를 사용할 때 populate해서 마치 하위 Document처럼 사용할 수 있게 해준다.</p>\n<p>populate는 aggregate 쿼리를 사용하지 않고, Document에 저장된 ObjectID를 find 하여 찾아진 Document를 Mongoose가 모델에 주입시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// populate.js</span>\r\n\r\n<span class=\"token keyword\">const</span> Post <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 모델</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Comment\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 모델</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'comments'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// post.user.name, post.comments[0].content 등을 사용할 수 있다.</span></code></pre></div>\n<h3>Express.js에서 Mongoose ODM 활용하기</h3>\n<p>보통 Express는 프로젝트 구조를 자유롭게 구성할 수 있어 적절한 위치에 Mongoose ODM을 위치시키면 된다.</p>\n<p>일반적으로 models 디렉토리에 Schema와 Model을 같이 위치시키고, app 객체가 선언되는 부분에 데이터베이스 연결을 명시하는 <code class=\"language-text\">mongoose.connect</code>를 위치시킨다.(app 객체: 어플리케이션의 시작을 의미) 또한, models 디렉토리의 <code class=\"language-text\">index.js</code>에 <code class=\"language-text\">mongoose.model</code>을 선언한다.</p>\n<p>추가적으로 Express.js 어플리케이션은 종료되지 않고 계속 동작하는 웹 서비스이기 때문에 계속해서 데이터베이스가 정상적으로 동작하고 있는지를 파악하기 위해 동작 중 발생하는 Mongoose ODM이 제공하는 데이터베이스 연결 관련 이벤트에 대한 처리를 하는 것이 권장된다.</p>\n<p>Mongoose ODM는 <code class=\"language-text\">connection</code> 객체를 제공하는데, 여기에 이벤트를 추가해 연결 상태에 대해 파악할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----\"</span><span class=\"token punctuation\">)</span>\r\n\r\nmongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connected\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연결 완료\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nmongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disconnected\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연결 끊김\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nmongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reconnected\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"재연결 완료\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\nmongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reconnectFailed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"재연결 시도 횟수 초과\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Sequelize ORM</h2>\n<p>ORM은 Object-Relational Mapping의 약어로, mySQL, PostgreSQL 등 RDBMS를 이용하는 간단한 방법이다. ODM이 단순히 모델에 집중해 관리하는 반면에 ORM은 테이블 관계와 쿼리 등의 기능을 더욱 단순화하는 용도로 주로 사용된다.</p>\n<ul>\n<li>\n<p>데이터 베이스 연결</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">dialect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sequelize ORM 또한, 연결을 관리하는 간단한 방법을 제공한다. mongoose의 경우 MongoDB에만 연결이 가능한데 비해 Sequelize ORM는 mySQL, PostgreSQL, SQLite 등 다양한 RDBMS에 연결이 가능하다.</p>\n</li>\n<li>\n<p>스키마 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataType<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataType<span class=\"token punctuation\">.</span>Inteager<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sequelize ORM는 <code class=\"language-text\">define</code>을 통해 스키마를 생성할 수 있으며, DDL도 생성해준다는 점이 mongoose와의 차이점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">User<span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span>\r\nPost<span class=\"token punctuation\">.</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\r\nFoo<span class=\"token punctuation\">.</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Bar<span class=\"token punctuation\">)</span>\r\nBar<span class=\"token punctuation\">.</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sequelize ORM를 통해 테이블 간의 관계를 코드 레벨로 관리할 수 있다. 따라서 외래키 설정과 제약 조건까지 DDL로 생성해준다. 또한, 다대다 관계 설정을 통해 Relation Table도 자동으로 생성해준다.</p>\n</li>\n<li>\n<p>쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">User<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'elice'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token punctuation\">[</span>0p<span class=\"token punctuation\">.</span>lt<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">[</span>0p<span class=\"token punctuation\">.</span>gte<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Operator를 활용해 SQL 쿼리를 코드로 작성할 수 있다. 스키마의 관계 설정을 한 경우에는 <code class=\"language-text\">include</code>를 사용해 자동으로 <code class=\"language-text\">join</code> 쿼리를 생성할 수 있다.</p>\n</li>\n<li>\n<p>Synchronization</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">sequelize.sync()</code> 함수를 사용하면 define된 model 데이터와 앞서 선언한 relation을 바탕으로 DDL을 자동으로 생성해준다. 따라서 직접 데이터베이스에 접속해 테이블 생성 및 관리를 할 필요가 없다. 다만, 자동으로 생성된 DDL을 따르지 않으면 테이블 관리가 어려워지는 문제가 있다.</p>\n</li>\n</ul>","frontmatter":{"title":"[Elice SW 2기] mini-log #030 : Node.js Express.js와 MongoDB 4","date":"May 13, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, HTML, CSS, JavaScript, OOP, Node.js, modules, npm, express.js, REST API, MongoDB, mongoose"}},"previous":{"fields":{"slug":"/2022-05-12/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #029 : Node.js Express.js와 MongoDB 3"}},"next":{"fields":{"slug":"/2022-05-23/"},"frontmatter":{"title":"[Elice SW 2기] mini-log 쇼핑몰 웹 서비스 제작 프로젝트"}}},"pageContext":{"id":"ca32effb-9507-579f-9a9b-169d75aa4b60","previousPostId":"cba0db4c-90ab-5db3-9993-9244be6a65bd","nextPostId":"ca21fabe-a03a-58d5-9a4f-dfcc8aa4c2b4"}},
    "staticQueryHashes": ["2841359383","3257411868"]}