{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/20220411_elice/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"0abcf392-24bc-546a-8902-7de11bed87dc","excerpt":"JavaScript 시작하기 JavaScript HTML보다 JavaScript가 동적인 언어이다. JavaScript는 웹 페이지에 생동감을 부여하기 위한 프로그래밍 언어로, 기본적으로 안전한 프로그래밍 언어이다. 예를 들어, 페이지에 새로운 HTML을 추가하거나, 기존의 HTML…","html":"<h1>JavaScript 시작하기</h1>\n<h2>JavaScript</h2>\n<p>HTML보다 JavaScript가 동적인 언어이다. JavaScript는 웹 페이지에 생동감을 부여하기 위한 프로그래밍 언어로, 기본적으로 안전한 프로그래밍 언어이다.</p>\n<p>예를 들어, 페이지에 새로운 HTML을 추가하거나, 기존의 HTML, CSS를 수정하거나 Mouse, Keyboard 등 사용자의 행동에 따라 반응하는 등의 일을 JavaScript를 통해 할 수 있다.</p>\n<h3>JavaScript 실행 방법</h3>\n<ul>\n<li>\n<p>브라우저의 Console 창(Interactive Mode, 대화형 도구)\r\n해당 웹 페이지를 대상으로 JavaScript가 실행된다. 브라우저의 개발자 도구를 통해 사용할 수 있으며, JavaScript 명령어를 입력하거나, 에러 메시지를 확인할 수 있다.</p>\n<p>이러한 Console Programming은 한 번에 하나의 프로그램을 실행하여 흐름을 예측할 수 있어 순차적인 프로그래밍에 적합하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please click OK.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\r\n\r\nspeechSynthesis<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechSynthesisUtterance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'꼭이요!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<blockquote>\n<p>문서로 기록: 문서에 기록하는 이유는 자동화시키기 위함이다.</p>\n</blockquote>\n<ul>\n<li>\n<p><code class=\"language-text\">&lt;script></code> 태그\r\n위치는 상관없이, HTML 문서 내에서 <code class=\"language-text\">&lt;script></code>를 활용해 JavaScript 프로그램을 활용할 수 있다. 외부 script 파일을 <code class=\"language-text\">src</code> 속성을 사용해 HTML 문서에 삽입할 수도 있는데, 이러한 방법이 더 선호된다.</p>\n<p>추가적으로, <code class=\"language-text\">src</code> 속성을 통해 외부 스크립트를 불러오는 경우 해당 <code class=\"language-text\">&lt;script></code> 태그 내부의 코드는 무시된다. 즉, 두 방식을 혼용하지 말고, 각각의 <code class=\"language-text\">&lt;script></code> 태그로 분리해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Script Tag<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\r\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p>Event Programming\r\n이벤트의 발생에 의해 프로그램의 흐름이 결정되는 프로그래밍 패러다임으로, 사용자와 상호작용하면서 실행하는 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hi<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\r\n  speechSynthesis.speak(new SpeechSynthesisUtterance(<span class=\"token punctuation\">'</span>HI<span class=\"token punctuation\">'</span>));\r\n  alert(<span class=\"token punctuation\">'</span>HI<span class=\"token punctuation\">'</span>);\r\n<span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n<h3>JavaScript DateType</h3>\n<p>JavaScript의 변수는 자료형에 관계없이 모든 데이터 타입을 가질 수 있다. 즉, 동적 타입 언어인 JavaScript는 데이터 타입은 존재하나 변수에 저장되는 값의 타입은 언제든지 바꿀 수 있다.</p>\n<h4>Number Type</h4>\n<p>Number Type은 정수 및 부동소수점 숫자를 나타낸다. 이러한 일반적인 숫자 외에 <code class=\"language-text\">∓Infinity</code>, <code class=\"language-text\">NaN</code>과 같은 특수 숫자 값도 포함된다.</p>\n<h5><code class=\"language-text\">NaN</code></h5>\n<p><code class=\"language-text\">NaN</code>은 <code class=\"language-text\">Not a Number</code>의 약어로, 계산 중 에러가 발생했다는 것을 나타내준다. 즉, 부정확하거나 정의되지 않은 수학 연산을 사용할 때 발생한다.</p>\n<h5>산술 연산자</h5>\n<p>덧셈 연산자 <code class=\"language-text\">+</code>, 뺄셈 연산자 <code class=\"language-text\">-</code>, 곱셈 연산자 <code class=\"language-text\">*</code>, 나눗셈 연산자 <code class=\"language-text\">/</code>, 나머지 연산자 <code class=\"language-text\">%</code>, 거듭제곱 연산자 <code class=\"language-text\">**</code>가 있다.</p>\n<h5><code class=\"language-text\">Math</code> 객체</h5>\n<p><code class=\"language-text\">Math</code> 객체는 JavaScript에서 제공하는 내장 객체로, 다양한 수학 관련 함수와 상수들이 포함되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 임의의 수 작성</span>\r\n\r\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 인수 중 최대값 반환</span>\r\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 인수 중 최솟값 반환</span>\r\n\r\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> power<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// n을 power번 거듭제곱 </span>\r\n\r\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 소수점 첫째 자리에서 내림</span>\r\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 소수점 첫째 자리에서 올림</span>\r\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 소수점 첫째 자리에서 반올림</span>\r\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 소수부 무시(* IE 미지원 *)</span></code></pre></div>\n<h4>String Type</h4>\n<p>JavaScript에서는 문자열을 따옴표로 묶는다.</p>\n<ul>\n<li>큰따옴표 <code class=\"language-text\">\" \"</code></li>\n<li>작은따옴표 <code class=\"language-text\">' '</code></li>\n<li>역따옴표(Backtick): 역 따옴표로 변수나 표현식을 감싼 후 <code class=\"language-text\">${…}</code>으로 변수나 표현식을 넣을 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, \\\r\nworld! &lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 작은 따옴표(줄바꿈 불가능: `\\`를 통해 코드 상으로만 가능케 함)</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, \r\nworld! &lt;br></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 백틱(줄바꿈 가능)</span>\r\n\r\nHello<span class=\"token punctuation\">,</span>       world<span class=\"token operator\">!</span> <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\r\nHello<span class=\"token punctuation\">,</span> \r\n      world<span class=\"token operator\">!</span> <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></code></pre></div>\n<h5>문자열과 이항 연산자 <code class=\"language-text\">+</code></h5>\n<p>덧셈 연산자 <code class=\"language-text\">+</code>는 숫자의 덧셈을 반환하지만, 이항 결합 연산자로서 문자열을 피연산자로 받는 경우에는 두 문자열을 병합하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// myString</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 12</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 21</span></code></pre></div>\n<h4>Boolean DataType</h4>\n<p>Boolean DataType는 <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code> 두 가지 값만을 갖는 자료형으로, 긍정이나 부정을 나타내는 값을 저장할 때 사용한다. 이러한 논리 자료형을 바탕으로 조건문과 반복문을 작성할 수 있다.</p>\n<h5>비교 연산자</h5>\n<p>비교 연산자는 Boolean을 도출하는 연산자이다. 부등호(<code class=\"language-text\">></code>, <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">>=</code>), 동등(<code class=\"language-text\">==</code>, <code class=\"language-text\">===</code>), 부등(<code class=\"language-text\">!=</code>, <code class=\"language-text\">!==</code>) 등이 있다.</p>\n<h3>JavaScript Variables</h3>\n<p>변수는 데이터를 저장할 때 쓰는 이름이 지정된 저장소이다. <code class=\"language-text\">let</code>, <code class=\"language-text\">var</code>를 활용하지 않아도 동작하지만, 적어주는 것이 좋다. 특히, <code class=\"language-text\">let</code>은 한 번 선언한 후에는 동일한 변수명으로는 선언하면 안된다.(<code class=\"language-text\">Uncaught SyntaxError: Identifier 'a' has already been declared</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> number<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>변수를 쓰는 이유</h4>\n<p>주석으로 해당 값에 대해 설명하는 것 보다, 변수를 활용하는 것이 더 효율적이다. 변수는 데이터의 이름을 붙인 것이기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10000: price, 0.1: tax_rate</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> tax_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> tax_amount <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> tax_rate<span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tax_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Vanila JS로 다크모드 구현하기</h3>\n<h3>Flow Control</h3>\n<p>조건문(Conditional Statement)과 반복문(Loop Statement)을 활용해서 코드의 흐름을 제어할 수 있다.</p>\n<h4>조건문(Conditional Statements)</h4>\n<p>조건에 따라 다른 동작을 해야할 때 조건문을 활용한다.</p>\n<blockquote>\n<p>if (condition) { 동작문 } else { 동작문 }</p>\n</blockquote>\n<blockquote>\n<p>(condition) ? 참인 경우 동작문 : 거짓일 경우 동작문</p>\n</blockquote>\n<p>참고\r\n<code class=\"language-text\">this</code>는 맥락에 따라서 의미가 변경(가리키는 대상이 변경되는)되는 내장된 변수이다.</p>\n<h4>반복문(Loop Statements)</h4>\n<p>반복문을 통해 동일한 코드를 여러번 반복할 수 있다.</p>\n<blockquote>\n<p>for (begin; condition; step) { 동작문 }</p>\n</blockquote>\n<blockquote>\n<p>while (condition)  { 동작문 }</p>\n</blockquote>\n<blockquote>\n<p>do { 동작문 } while (condition);</p>\n</blockquote>","frontmatter":{"title":"[Elice] SW 엔지니어 트랙 2기 6일차 mini-log","date":"April 11, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, 이고잉, HTML, CSS, JavaScript"}},"previous":{"fields":{"slug":"/20220408_elice/"},"frontmatter":{"title":"[Elice] SW 엔지니어 트랙 2기 5일차 mini-log"}},"next":null},"pageContext":{"id":"0abcf392-24bc-546a-8902-7de11bed87dc","previousPostId":"2f44cf90-cfd8-5170-a5b8-31dcc5361c0f","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}