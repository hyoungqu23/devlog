{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-04-25/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HyoungMin's mini-log"}},"markdownRemark":{"id":"4f8604b0-4eae-552d-b555-2850118efa5e","excerpt":"00. Review CRUD pages 구현하기 npx vscode-new: 임시 새 창 열기(temp 디렉토리) 01. JSON server 설치 프로토타입 백엔드 서버로 활용된다. 으로 진입이 가능하다. 실행 수많은 서버를 구분하기 위해 port(0 ~ 6500…","html":"<h2>00. Review</h2>\n<p>CRUD pages 구현하기</p>\n<p>npx vscode-new: 임시 새 창 열기(temp 디렉토리)</p>\n<h2>01. JSON server</h2>\n<blockquote>\n<p>설치</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g json-server</code></pre></div>\n<p>프로토타입 백엔드 서버로 활용된다. <code class=\"language-text\">localhost:3000</code>으로 진입이 가능하다.</p>\n<blockquote>\n<p>실행</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx json-server --watch db.json</code></pre></div>\n<p>수많은 서버를 구분하기 위해 port(0 ~ 65000) 번호를 부여한다. 3000번의 json server가 대기하고 있어 통신할 수 있다. 이후\r\n<code class=\"language-text\">http://127.0.0.1:3000/topics/1</code>에서 <code class=\"language-text\">topics/1</code>에 의해 topics의 첫 번째 정보를 응답한다.</p>\n<p>json-server는 요청을 받은 데이터를 찾고, 이를 응답하여 보내주거나 Restful API 약속에 따라 추가, 수정, 삭제 등을 처리한다.</p>\n<h2>02. Ajax</h2>\n<p>Asynchronous JavaScript And XML의 약어로, 서버와 비동기적으로 통신할 때 사용하는 API이다. 과거에는 XMLHttpRequest를 사용했지만, 현재는 fetch를 사용한다.</p>\n<h2>03. fetch</h2>\n<p>fetch API를 활용하면 개발자 도구의 네트워크 탭(브라우저와 서버 간에 통신내용을 모니터링 할 때 사용하는 도구)에서 콘솔에 JavaScript로 웹 페이지를 접속할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>첫 번째 then에서 데이터 타입을 결정한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/topics'</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 축약</span>\r\n  <span class=\"token comment\">// .then(function(response) {return response.text()})</span></code></pre></div>\n<p>서버가 보내주는 데이터가 fetch API에 text라고 알려주는 것이다.</p>\n<blockquote>\n<p>두 번째 then에서 데이터를 전달 받는다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/topics'</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// [</span>\r\n<span class=\"token comment\">//   {</span>\r\n<span class=\"token comment\">//     \"id\": 1,</span>\r\n<span class=\"token comment\">//     \"title\": \"HTML\",</span>\r\n<span class=\"token comment\">//     \"body\": \"HTML is ...\"</span>\r\n<span class=\"token comment\">//   },</span>\r\n<span class=\"token comment\">//   {</span>\r\n<span class=\"token comment\">//     \"id\": 2,</span>\r\n<span class=\"token comment\">//     \"title\": \"CSS\",</span>\r\n<span class=\"token comment\">//     \"body\": \"CSS is ...\"</span>\r\n<span class=\"token comment\">//   },</span>\r\n<span class=\"token comment\">//   {</span>\r\n<span class=\"token comment\">//     \"id\": 3,</span>\r\n<span class=\"token comment\">//     \"title\": \"JavaScript\",</span>\r\n<span class=\"token comment\">//     \"body\": \"JavaScript is ...\"</span>\r\n<span class=\"token comment\">//   }</span>\r\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p>이렇게 가져온 데이터는 단순 text로, JavaScript 데이터로 변환하기 위해 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code class=\"language-text\">JSON.parse()</code></a>를 사용하면, JavaScript 데이터 타입으로 전환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>JSON을 활용하는 이유는 php, Java, Python 등의 언어로 이루어진 서버에서 만들어진 데이터를 가져오면, 웹 브라우저의 JavaScript로 바로 받아올 수 없다. 따라서 <code class=\"language-text\">[]</code>, <code class=\"language-text\">{}</code> 등 약속을 정해 주요한 데이터 타입을 서로 활용할 수 있게끔 하기 위해 JSON 데이터를 활용하는 것이다.</p>\n<p>즉, 서로 다른 언어끼리 데이터를 주고 받기 위해 약속한 데이터 형식이나 포맷을 JSON이라고 할 수 있다. JavaScript 데이터 표기법을 기준으로 데이터를 텍스트로 저장하는 것이 <a href=\"https://www.json.org/json-en.html\">JSON(JavaScript Object Notation)</a>이다.</p>\n<p>따라서 첫 번째 then에서 JSON 타입이라고 선언하면, 이는 JSON 데이터를 JavaScript 데이터로 전환시켜서 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/topics'</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// (3) [{…}, {…}, {…}]</span></code></pre></div>\n<blockquote>\n<p>CRUD 프로젝트 JSON으로 변경하기</p>\n</blockquote>\n<p>다만, 이렇게 변경하면 json-server를 종료하면 더이상 데이터를 가져오지 못한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">nav</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:3000/topics\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">topics</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> topics\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li>&lt;a href='/read/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.html' id='</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' onclick='navHandler(event);'></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/a>&lt;/li></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nav>ol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>json-server는 id 값을 주소에 추가하면, 해당 데이터만 가져올 수 있다. 즉, id 값을 통해 해당 데이터만 가져오게 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// selectedId를 주소에 추가하여 해당 데이터 1개만 가져오기 때문에 topic만 가져와도 된다.</span>\r\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:3000/topics/\"</span><span class=\"token operator\">+</span>selectedId<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">topic</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token comment\">// 서버로부터 데이터를 받아오고, json 데이터로 변환한 이후에 실행되는 부분</span>\r\n      <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h2></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h2>&lt;p></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">.</span>body<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p></span><span class=\"token template-punctuation string\">`</span></span>\r\n      $article<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>04. Rest API</h2>\n<p>http의 기능을 최대한 활용해 서버와 통신할 것을 제안하는 모범 사례. (URL의 모범 사례를 보여준다.)\r\n![rest api](rest api.png)</p>\n<p>데이터를 제공할 때 Rest API에 준수하면 좋다.\r\n<img src=\"image4.png\" alt=\"crud\"></p>\n<p>GET method를 활용해 보통 데이터를 조회한다.</p>\n<p>POST method를 활용하면 데이터를 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/topics'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[Elice SW 2기] mini-log #016 : JavaScript 심화 - JSON server와 REST API","date":"April 25, 2022","description":"Elice, SW, WEB, Frontend, Bootcamp, 이고잉, HTML, CSS, JavaScript, OOP, Event, ES6, JSON, JSON server, ajax, fetch API, REST API"}},"previous":{"fields":{"slug":"/2022-04-22/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #015 : JavaScript 심화 - 변수와 Hoisting"}},"next":{"fields":{"slug":"/2022-04-26/"},"frontmatter":{"title":"[Elice SW 2기] mini-log #018 : JavaScript 심화 - 비동기와 Promise"}}},"pageContext":{"id":"4f8604b0-4eae-552d-b555-2850118efa5e","previousPostId":"ac159bc0-e38c-5551-9344-971545baf744","nextPostId":"16cecbaa-871f-52c5-8cf8-f63eaf023312"}},
    "staticQueryHashes": ["2841359383","3257411868"]}